



TBD                                                      B. Fussell, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                           R. Hammett, Ed.
Expires: May 5, 2019                                            G2, Inc.
                                                        November 1, 2018


                    ACVP KAS ECC JSON Specification
                     draft-ietf-acvp-subkasecc-1.0

Abstract

   This document defines the JSON schema for using KAS ECC algorithms
   with the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 5, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Fussell & Hammett          Expires May 5, 2019                  [Page 1]

Internet-Draft                Sym Alg JSON                 November 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Test Types and Test Coverage  . . . . . . . . . . . . . . . .   3
     2.1.  Test Coverage . . . . . . . . . . . . . . . . . . . . . .   4
       2.1.1.  KAS-ECC Requirements Covered  . . . . . . . . . . . .   4
       2.1.2.  KAS-ECC Requirements Not Covered  . . . . . . . . . .   5
   3.  Capabilities Registration . . . . . . . . . . . . . . . . . .   6
     3.1.  Required Prerequisite Algorithms for KAS ECC Validations    6
     3.2.  KAS ECC Algorithm Capabilities JSON Values  . . . . . . .   8
     3.3.  Supported KAS ECC Functions . . . . . . . . . . . . . . .   9
     3.4.  KAS ECC Schemes . . . . . . . . . . . . . . . . . . . . .  10
       3.4.1.  KAS ECC Scheme Capabilities JSON Values . . . . . . .  10
       3.4.2.  Supported KAS ECC Schemes . . . . . . . . . . . . . .  11
     3.5.  KAS ECC Modes . . . . . . . . . . . . . . . . . . . . . .  12
       3.5.1.  KAS ECC noKdfNoKc . . . . . . . . . . . . . . . . . .  12
       3.5.2.  KAS ECC kdfNoKc . . . . . . . . . . . . . . . . . . .  12
       3.5.3.  KAS ECC kdfKc . . . . . . . . . . . . . . . . . . . .  13
     3.6.  Parameter Sets  . . . . . . . . . . . . . . . . . . . . .  13
       3.6.1.  KAS ECC Parameter Set . . . . . . . . . . . . . . . .  13
       3.6.2.  KAS ECC Parameter Set Details . . . . . . . . . . . .  14
     3.7.  Supported ECC Curves  . . . . . . . . . . . . . . . . . .  15
     3.8.  Supported Hash Algorithm Methods  . . . . . . . . . . . .  15
     3.9.  Supported KAS ECC MAC Options . . . . . . . . . . . . . .  16
     3.10. Supported KAS ECC KDF Options . . . . . . . . . . . . . .  17
       3.10.1.  Other Information Construction . . . . . . . . . . .  18
     3.11. Supported KAS ECC KC Options  . . . . . . . . . . . . . .  19
     3.12. Example KAS ECC Capabilities JSON Object  . . . . . . . .  19
     3.13. Example KAS ECC Component Capabilities JSON Object  . . .  21
   4.  Generation requirements per party per scheme  . . . . . . . .  23
   5.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  30
     5.1.  Test Groups JSON Schema . . . . . . . . . . . . . . . . .  31
     5.2.  Test Case JSON Schema . . . . . . . . . . . . . . . . . .  34
     5.3.  Example Test Vectors JSON Object  . . . . . . . . . . . .  37
     5.4.  Example Test Vectors Component JSON Object  . . . . . . .  40
   6.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  42
     6.1.  Example Test Results JSON Object  . . . . . . . . . . . .  43
     6.2.  Example Test Results Component JSON Object  . . . . . . .  44
   7.  ECC CDH Component Test  . . . . . . . . . . . . . . . . . . .  45
     7.1.  ECC CDH Component Capabilities JSON Values  . . . . . . .  46
       7.1.1.  Example KAS ECC CDH-Component Capabilities JSON
               Object  . . . . . . . . . . . . . . . . . . . . . . .  46
     7.2.  ECC CDH Component TestVectors JSON Values . . . . . . . .  47
       7.2.1.  ECC CDH Component TestGroup JSON Values . . . . . . .  47
       7.2.2.  ECC CDH Component TestCase JSON Values  . . . . . . .  48
       7.2.3.  Example KAS ECC CDH-Component Test Vectors JSON
               Object  . . . . . . . . . . . . . . . . . . . . . . .  49



Fussell & Hammett          Expires May 5, 2019                  [Page 2]

Internet-Draft                Sym Alg JSON                 November 2018


     7.3.  KAS CDH-Component Test Vector Responses . . . . . . . . .  50
     7.4.  Example KAS ECC CDH Component Test Results JSON Object  .  52
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  53
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  53
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  54
   11. Normative References  . . . . . . . . . . . . . . . . . . . .  54
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  54

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing KAS ECC
   algorithms using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

2.  Test Types and Test Coverage

   The ACVP server performs a set of tests on the KAS protocol in order
   to assess the correctness and robustness of the implementation.  A
   typical ACVP validation session SHALL require multiple tests to be
   performed for every supported permutation of KAS capabilities.  This
   section describes the design of the tests used to validate
   implementations of KAS algorithms.  There are two test types for KAS
   testing:

      "AFT" - Algorithm Function Test.  In the AFT test mode, the IUT
      SHALL act as a party in the Key Agreement with the ACVP server.
      The server SHALL generate and provide all necessary information
      for the IUT to perform a successful key agreement; both the server
      and IUT MAY act as party U/V, as well as recipient/provider to key
      confirmation.

      "VAL" - Validation test.  In the VAL test mode, The ACVP server
      MUST generate a complete (from both party U and party V's



Fussell & Hammett          Expires May 5, 2019                  [Page 3]

Internet-Draft                Sym Alg JSON                 November 2018


      perspectives) key agreement, and expects the IUT to be able to
      determine if that agreement is valid.  Various types of errors
      MSUT be introduced in varying portions of the key agreement
      process (changed DKM, changed key, changed hash digest, etc), that
      the IUT MUST be able to detect and report on.

2.1.  Test Coverage

   The tests described in this document have the intention of ensuring
   an implementation is conformant to [SP800-56a].

2.1.1.  KAS-ECC Requirements Covered

      SP 800-56a - 4.1 Key Establishment Preparations.  The ACVP server
      is responsible for generating domain parameters as per the IUT's
      capability registration.

      SP 800-56a - 4.2 Key-Agreement Process.  Both the ACVP server and
      IUT participate in the Key Agreement process.  The server and IUT
      can both take the roles of party U/V, and as such the "performer"
      of steps depicted in "Figure 2: Key Agreement process" can vary.

      SP 800-56a - 5.1 Cryptographic Hash Functions.  All modes of
      performing KAS SHALL make use of a hash function.  The hash
      function MAY be used for confirmation of a successfully generated
      shared secret Z (noKdfNoKc), or as a primitive within the KDF
      being tested (kdfNoKc and kdfKc).

      SP 800-56a - 5.2 Message Authentication Code (MAC) Algorithm.  A
      MAC is utilized for confirmation of success for kdfNoKc and kdfKc
      modes of KAS.  Note - a MAC prerequisite is REQUIRED only for
      kdfKc, though is utilized for both kdfNoKc and kdfKc.

      SP 800-56a - 5.4 Nonce.  Nonces are made use of in various KAS
      schemes - both the ACVP server and IUT SHALL be expected to
      generate nonces.

      SP 800-56a - 5.6 Domain Parameters.  Domain Parameter Generation
      SHALL be performed solely from the ACVP server, with constraints
      from the IUTs capabilities registration.  The same set of domain
      parameters SHALL generate all keypairs (party U/V, static/
      ephemeral) for a single test case.

      SP 800-56a - 5.6 Key-Pair Generation.  While Key-Pairs are used in
      each KAS scheme, the generation of said key-pairs is out of scope
      for KAS testing.  Random tests from the VAL groups, MAY inject bad
      keypairs that the IUT MUST be able detect.  These random tests are




Fussell & Hammett          Expires May 5, 2019                  [Page 4]

Internet-Draft                Sym Alg JSON                 November 2018


      only present in groups given appropriate assurance functions see:
      Section 3.3

      SP 800-56a - 4.3 DLC-based Key-Transport Process / 5.7 DLC
      Primitives.  Depending on the scheme used, either Diffie Hellman
      or MQV SHALL be used to negotiate a shared secret of z.  Testing
      and validation of such key exchanges is covered under their
      respective schemes.

      SP 800-56a - 5.8 Key-Derivation Methods for Key-Agreement Schemes.
      All schemes/modes save noKdfNoKc (component) MUST make use of a
      KDF.  KDF construction SHALL utilize Section 3.10.1 for its
      pattern.

      SP 800-56a - 5.9 Key Confirmation.  Most KAS schemes allow for a
      Key Confirmation process, the ACVP server and IUT MAY be Providers
      or Recipients of said confirmation.  Additionally, key
      confirmation MAY be performed on one or both parties (depending on
      scheme).

      SP 800-56a - 6 Key Agreement Schemes.  All schemes specified in
      referenced document are supported for validation with the ACVP
      server.

2.1.2.  KAS-ECC Requirements Not Covered

      SP 800-56a - 4.1 Key Establishment Preparations.  The ACVP server
      SHALL NOT make a distinction between IUT generated keys via a
      trusted third party and the IUT itself.

      SP 800-56a - 5.3 Random Number Generation.  The IUT MUST perform
      all random number generation with a validated random number
      generator.  A DRBG is REQUIRED as a prerequisite to KAS, but SHALL
      NOT be in the scope testing assurances.

      SP 800-56a - 5.4 Nonce.  Nonce generation is utilized for several
      schemes.  The various methods of generating a nonce described in
      section 5.5 MUST be used, however their generation SHALL NOT be in
      scope of KAS testing assurances

      SP 800-56a - 5.5.2 Assurances of Domain-Parameter Validity.  The
      ACVP server SHALL generate all domain parameters, IUT validation
      of such parameters is SHALL NOT be in scope for KAS testing.

      SP 800-56a - 5.5.3 Domain Parameter Management.  Domain Parameter
      Management SHALL NOT be in scope for KAS testing.





Fussell & Hammett          Expires May 5, 2019                  [Page 5]

Internet-Draft                Sym Alg JSON                 November 2018


      SP 800-56a - 5.6 Key-Pair Generation.  While Key-Pairs MUST be
      used in each KAS scheme, the generation, assurances, and
      management of said key-pairs SHALL NOT be in scope of KAS testing.

      SP 800-56a - 5.8 Key-Derivation Methods for Key-Agreement Schemes.
      Two-step Key-Derivation (Extraction-then-Expansion) SHALL NOT be
      utilized in KAS testing.

      SP 800-56a - 5.9 Key Confirmation.  KMAC is referenced in 800-56a
      as being a valid MAC function; it however SHALL NOT (currently) be
      supported in KAS testing.

      SP 800-56a - 5.7 Rationale for Selecting a Specific Scheme.  It is
      expected that the IUT registers all schemes it supports in its
      capabilities registration.  Selecting specific schemes from a KAS
      testing perspective SHALL NOT be in scope.

      SP 800-56a - 8 Key Recovery.  Key Recovery SHALL NOT be in scope
      of KAS testing.

3.  Capabilities Registration

   ACVP REQUIRES crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of KAS ECC algorithms to the
   ACVP server.

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.  Each KDF algorithm capability advertised is a
   self-contained JSON object.

3.1.  Required Prerequisite Algorithms for KAS ECC Validations

   Some algorithm implementations rely on other cryptographic
   primitives.  For example, IKEv2 uses an underlying SHA algorithm.
   Each of these underlying algorithm primitives must be validated,
   either separately or as part of the same submission.  ACVP provides a
   mechanism for specifying the required prerequisites:






Fussell & Hammett          Expires May 5, 2019                  [Page 6]

Internet-Draft                Sym Alg JSON                 November 2018


   +--------------+--------------+--------------+-----------+----------+
   | JSON Value   | Description  | JSON type    | Valid     | Optional |
   |              |              |              | Values    |          |
   +--------------+--------------+--------------+-----------+----------+
   | algorithm    | a            | value        | CCM,      | No       |
   |              | prerequisite |              | CMAC,     |          |
   |              | algorithm    |              | DRBG,     |          |
   |              |              |              | ECDSA,    |          |
   |              |              |              | HMAC, SHA |          |
   |              |              |              |           |          |
   | valValue     | algorithm    | value        | actual    | No       |
   |              | validation   |              | number or |          |
   |              | number       |              | "same"    |          |
   |              |              |              |           |          |
   | prereqAlgVal | prerequistie | object with  | see above | Yes      |
   |              | algorithm    | algorithm    |           |          |
   |              | validation   | and valValue |           |          |
   |              |              | properties   |           |          |
   |              |              |              |           |          |
   +--------------+--------------+--------------+-----------+----------+

           Table 1: Required Prerequisite Algorithms JSON Values

   KAS has conditional prerequisite algorithms, depending on the
   capabilities registered:


























Fussell & Hammett          Expires May 5, 2019                  [Page 7]

Internet-Draft                Sym Alg JSON                 November 2018


   +--------------+----------------------------------------------------+
   | Prerequisite | Condition                                          |
   | Algorithm    |                                                    |
   +--------------+----------------------------------------------------+
   | DRBG         | Always REQUIRED                                    |
   |              |                                                    |
   | SHA          | Always REQUIRED                                    |
   |              |                                                    |
   | ECDSA        | ECDSA.PKV validation REQUIRED when IUT using       |
   |              | assurance functions of "fullVal", "keyPairGen", or |
   |              | "keyRegen". ECDSA.KeyPair validation REQUIRED when |
   |              | IUT using assurances functions of "keyPairGen", or |
   |              | "keyRegen".                                        |
   |              |                                                    |
   | AES-CCM      | AES-CCM validation REQUIRED when IUT is performing |
   |              | KeyConfirmation (KC) and utilizing AES-CCM.        |
   |              |                                                    |
   | CMAC         | CMAC validation REQUIRED when IUT is performing    |
   |              | KeyConfirmation (KC) and utilizing CMAC.           |
   |              |                                                    |
   | HMAC         | HMAC validation REQUIRED when IUT is performing    |
   |              | KeyConfirmation (KC) and utilizing HMAC.           |
   |              |                                                    |
   +--------------+----------------------------------------------------+

               Table 2: Prerequisite requirement conditions

3.2.  KAS ECC Algorithm Capabilities JSON Values

   Each algorithm capability advertised is a self-contained JSON object
   using the following values.




















Fussell & Hammett          Expires May 5, 2019                  [Page 8]

Internet-Draft                Sym Alg JSON                 November 2018


   +------------+----------------+--------------+-----------+----------+
   | JSON Value | Description    | JSON type    | Valid     | Optional |
   |            |                |              | Values    |          |
   +------------+----------------+--------------+-----------+----------+
   | algorithm  | The algorithm  | value        | KAS-ECC   | No       |
   |            | under test     |              |           |          |
   |            |                |              |           |          |
   | mode       | The algorithm  | value        | Component | Yes      |
   |            | mode.          |              |           |          |
   |            |                |              |           |          |
   | revision   | The algorithm  | value        | "1.0"     | No       |
   |            | testing        |              |           |          |
   |            | revision to    |              |           |          |
   |            | use.           |              |           |          |
   |            |                |              |           |          |
   | prereqVals | Prerequisite   | array of     | See       | No       |
   |            | algorithm      | prereqAlgVal | Section   |          |
   |            | validations    | objects      | 3.1       |          |
   |            |                |              |           |          |
   | function   | Type of        | array        | See       | No       |
   |            | function       |              | Section   |          |
   |            | supported      |              | 3.3       |          |
   |            |                |              |           |          |
   | scheme     | Array of       | object       | See       | No       |
   |            | supported key  |              | Section   |          |
   |            | agreement      |              | 3.4.1     |          |
   |            | schemes each   |              |           |          |
   |            | having their   |              |           |          |
   |            | own            |              |           |          |
   |            | capabilities   |              |           |          |
   |            |                |              |           |          |
   +------------+----------------+--------------+-----------+----------+

                 Table 3: KAS ECC Capabilities JSON Values

   Note: Some optional values are required depending on the algorithm.
   Failure to provide these values will result in the ACVP server
   returning an error to the ACVP client during registration.

3.3.  Supported KAS ECC Functions

   The following function types MAY be advertised by the ACVP compliant
   crypto module:

   o  dpGen - IUT can perform domain parameter generation (FFC only)

   o  dpVal - IUT can perform domain parameter validation (FFC only)




Fussell & Hammett          Expires May 5, 2019                  [Page 9]

Internet-Draft                Sym Alg JSON                 November 2018


   o  keyPairGen - IUT can perform keypair generation.

   o  fullVal - IUT can perform full public key validation ( [SP800-56a]
      section 5.6.2.3.1 / 5.6.2.3.3)

   o  partialVal - IUT can perform partial public key validation (
      [SP800-56a] section 5.6.2.3.2 / 5.6.2.3.4)

   o  keyRegen - IUT can regenerate keys given a specific seed and
      domain parameter (pqg for FFC, curve for ECC)

3.4.  KAS ECC Schemes

3.4.1.  KAS ECC Scheme Capabilities JSON Values

   All other scheme capabilities are advertised as a self-contained JSON
   object using the following values.  Note that at least one of
   "noKdfNoKc", "kdfNoKc", or "kdfKc" MUST be supplied with the
   registration.  See Section 3.4.2 for allowed ECC scheme types.
































Fussell & Hammett          Expires May 5, 2019                 [Page 10]

Internet-Draft                Sym Alg JSON                 November 2018


   +-----------+-----------------------+--------+-----------+----------+
   | JSON      | Description           | JSON   | Valid     | Optional |
   | Value     |                       | type   | Values    |          |
   +-----------+-----------------------+--------+-----------+----------+
   | kasRole   | Roles supported for   | array  | initiator | No       |
   |           | key agreement         |        | and/or    |          |
   |           |                       |        | responder |          |
   |           |                       |        |           |          |
   | noKdfNoKc | Indicates no KDF, no  | object | Section   | Yes      |
   |           | KC tests are to be    |        | 3.5.1     |          |
   |           | generated. Note this  |        |           |          |
   |           | is a COMPONENT mode   |        |           |          |
   |           | only test. This       |        |           |          |
   |           | property MUST only be |        |           |          |
   |           | used with "KAS-ECC" / |        |           |          |
   |           | "Component"           |        |           |          |
   |           |                       |        |           |          |
   | kdfNoKc   | Indicates KDF, no KC  | object | Section   | Yes      |
   |           | tests are to be       |        | 3.5.2     |          |
   |           | generated. Note this  |        |           |          |
   |           | is a KAS-ECC only     |        |           |          |
   |           | test. This mode MAY   |        |           |          |
   |           | only be used for      |        |           |          |
   |           | registrations with    |        |           |          |
   |           | "KAS-ECC" (no mode)   |        |           |          |
   |           |                       |        |           |          |
   | kdfKc     | Indicates KDF, KC     | object | Section   | Yes      |
   |           | tests are to be       |        | 3.5.3     |          |
   |           | generated. Note this  |        |           |          |
   |           | is a KAS-ECC only     |        |           |          |
   |           | test. This mode MAY   |        |           |          |
   |           | only be used for      |        |           |          |
   |           | registrations with    |        |           |          |
   |           | "KAS-ECC" (no mode)   |        |           |          |
   |           |                       |        |           |          |
   +-----------+-----------------------+--------+-----------+----------+

                 Table 4: KAS ECC Capabilities JSON Values

3.4.2.  Supported KAS ECC Schemes

   The following schemes MAY be advertised by the ACVP compliant crypto
   module:

   o  ephemeralUnified - keyConfirmation not supported

   o  fullMqv




Fussell & Hammett          Expires May 5, 2019                 [Page 11]

Internet-Draft                Sym Alg JSON                 November 2018


   o  fullUnified

   o  onePassDh - Can only provide unilateral key confirmation party V
      to party U.

   o  onePassMqv

   o  onePassUnified

   o  staticUnified

3.5.  KAS ECC Modes

3.5.1.  KAS ECC noKdfNoKc

   Contains properties REQUIRED for "noKdfNoKc" registration.

   +--------------+---------------------+--------+----------+----------+
   | JSON Value   | Description         | JSON   | Valid    | Optional |
   |              |                     | type   | Values   |          |
   +--------------+---------------------+--------+----------+----------+
   | parameterSet | The parameterSet    | object | Section  | No       |
   |              | options for         |        | 3.6.1    |          |
   |              | "noKdfNoKc"         |        |          |          |
   |              |                     |        |          |          |
   +--------------+---------------------+--------+----------+----------+

                      Table 5: NoKdfNoKc Capabilities

3.5.2.  KAS ECC kdfNoKc

   Contains properties REQUIRED for "kdfNoKc" registration.

   +--------------+---------------------+--------+----------+----------+
   | JSON Value   | Description         | JSON   | Valid    | Optional |
   |              |                     | type   | Values   |          |
   +--------------+---------------------+--------+----------+----------+
   | kdfOption    | The kdf options for | object | Section  | No       |
   |              | "kdfNoKc"           |        | 3.10     |          |
   |              |                     |        |          |          |
   | parameterSet | The parameterSet    | object | Section  | No       |
   |              | options for         |        | 3.6.1    |          |
   |              | "kdfNoKc"           |        |          |          |
   |              |                     |        |          |          |
   +--------------+---------------------+--------+----------+----------+

                       Table 6: kdfNoKc Capabilities




Fussell & Hammett          Expires May 5, 2019                 [Page 12]

Internet-Draft                Sym Alg JSON                 November 2018


3.5.3.  KAS ECC kdfKc

   Contains properties REQUIRED for "kdfKc" registration.

   +--------------+---------------------+--------+----------+----------+
   | JSON Value   | Description         | JSON   | Valid    | Optional |
   |              |                     | type   | Values   |          |
   +--------------+---------------------+--------+----------+----------+
   | kdfOption    | The kdf options for | object | Section  | No       |
   |              | "kdfNoKc"           |        | 3.10     |          |
   |              |                     |        |          |          |
   | kcOption     | The kc options for  | object | Section  | No       |
   |              | "kdfNoKc"           |        | 3.11     |          |
   |              |                     |        |          |          |
   | parameterSet | The parameterSet    | object | Section  | No       |
   |              | options for         |        | 3.6.1    |          |
   |              | "kdfNoKc"           |        |          |          |
   |              |                     |        |          |          |
   +--------------+---------------------+--------+----------+----------+

                        Table 7: kdfKc Capabilities

3.6.  Parameter Sets

3.6.1.  KAS ECC Parameter Set

   Each parameter set advertised is a self-contained JSON object using
   the following values.  Note that at least one parameter set ("eb",
   "ec", "ed", "ee") is REQUIRED.






















Fussell & Hammett          Expires May 5, 2019                 [Page 13]

Internet-Draft                Sym Alg JSON                 November 2018


   +----------+------------------+----------+---------------+----------+
   | JSON     | Description      | JSON     | Valid Values  | Optional |
   | Value    |                  | type     |               |          |
   +----------+------------------+----------+---------------+----------+
   | eb       | The eb parameter | object   | See Section   | Yes      |
   |          | set              |          | 3.6.2         |          |
   |          |                  |          |               |          |
   | ec       | The ec parameter | object   | See Section   | Yes      |
   |          | set              |          | 3.6.2         |          |
   |          |                  |          |               |          |
   | ed       | The ed parameter | object   | See Section   | Yes      |
   |          | set              |          | 3.6.2         |          |
   |          |                  |          |               |          |
   | ee       | The ee parameter | object   | See Section   | Yes      |
   |          | set              |          | 3.6.2         |          |
   |          |                  |          |               |          |
   +----------+------------------+----------+---------------+----------+

          Table 8: KAS ECC Parameter Set Capabilities JSON Values

3.6.2.  KAS ECC Parameter Set Details

   eb: Len n - 224-255, min Len h - 112, min hash len - 224, min keySize
   - 112, min macSize - 64

   ec: Len n - 256-283, min Len h - 128, min hash len - 256, min keySize
   - 128, min macSize - 64

   ed: Len n - 384-511, min Len h - 192, min hash len - 384, min keySize
   - 192, min macSize - 64

   ee: Len n - 512+, min Len h - 256, min hash len - 512, min keySize -
   256, min macSize - 64

   "noKdfNoKc" REQUIRES "hashAlg"

   "kdfNoKc" REQUIRES "hashAlg" and at least one valid MAC registration

   "kdfKc" REQUIRES "hashAlg" and at least one valid MAC registration












Fussell & Hammett          Expires May 5, 2019                 [Page 14]

Internet-Draft                Sym Alg JSON                 November 2018


   +-----------+-----------------------+--------+-----------+----------+
   | JSON      | Description           | JSON   | Valid     | Optional |
   | Value     |                       | type   | Values    |          |
   +-----------+-----------------------+--------+-----------+----------+
   | curve     | The elliptic curve to | value  | See       | No       |
   |           | use for key           |        | Section   |          |
   |           | generation.           |        | 3.7       |          |
   |           |                       |        |           |          |
   | hashAlg   | The hash algorithms   | array  | See       | No       |
   |           | to use for KDF (and   |        | Section   |          |
   |           | noKdfNoKc)            |        | 3.8       |          |
   |           |                       |        |           |          |
   | macOption | The macOption(s) to   | object | See       | Yes      |
   |           | use with "kdfNoKc"    |        | Section   |          |
   |           | and/or "kdfKc"        |        | 3.9       |          |
   |           |                       |        |           |          |
   +-----------+-----------------------+--------+-----------+----------+

      Table 9: KAS ECC Parameter Set Details Capabilities JSON Values

3.7.  Supported ECC Curves

   The following ECC Curves MAY be advertised by the ACVP compliant
   crypto module:

               +---------------+-------+---------+--------+
               | Parameter Set | Prime | Koblitz | Binary |
               +---------------+-------+---------+--------+
               | eb            | P-224 | K-233   | B-233  |
               |               |       |         |        |
               | ec            | P-256 | K-283   | B-283  |
               |               |       |         |        |
               | ed            | P-384 | K-409   | B-409  |
               |               |       |         |        |
               | ee            | P-521 | K-571   | B-571  |
               |               |       |         |        |
               +---------------+-------+---------+--------+

               Table 10: Supported Curves per parameter set.

3.8.  Supported Hash Algorithm Methods

   The following SHA methods MAY be advertised by the ACVP compliant
   crypto module:

   o  SHA2-224

   o  SHA2-256



Fussell & Hammett          Expires May 5, 2019                 [Page 15]

Internet-Draft                Sym Alg JSON                 November 2018


   o  SHA2-384

   o  SHA2-512

3.9.  Supported KAS ECC MAC Options

   The following MAC options MAY be advertised for registration under a
   "kdfNoKc" and "kdfKc" kasMode:

   o  AES-CCM

   o  CMAC

   o  HMAC-SHA2-224

   o  HMAC-SHA2-256

   o  HMAC-SHA2-384

   o  HMAC-SHA2-512































Fussell & Hammett          Expires May 5, 2019                 [Page 16]

Internet-Draft                Sym Alg JSON                 November 2018


   +----------+-------------+--------+---------------------+-----------+
   | JSON     | Description | JSON   | Valid Values        | Optional  |
   | Value    |             | type   |                     |           |
   +----------+-------------+--------+---------------------+-----------+
   | keyLen   | The         | Domain | AES based MACs      | No        |
   |          | supported   |        | limited to 128,     |           |
   |          | keyLens for |        | 192, 256. HashAlg   |           |
   |          | the         |        | based MACs mod 8.   |           |
   |          | selected    |        | All keySizes        |           |
   |          | MAC.        |        | minimum MUST        |           |
   |          |             |        | conform to          |           |
   |          |             |        | parameter set       |           |
   |          |             |        | requirements See    |           |
   |          |             |        | Section 3.6.2 .     |           |
   |          |             |        |                     |           |
   | nonceLen | The nonce   | value  | Input as bits,      | Yes       |
   |          | len for use |        | 56-104, odd byte    | (required |
   |          | with AES-   |        | values only (7-13). | for AES-  |
   |          | CCM mac     |        | Additionally        | CCM)      |
   |          |             |        | minimum MUST        |           |
   |          |             |        | conform to          |           |
   |          |             |        | parameter set       |           |
   |          |             |        | requirements See    |           |
   |          |             |        | Section 3.6.2 .     |           |
   |          |             |        |                     |           |
   | macLen   | The mac len | value  | Input as bits, mod  | Yes       |
   |          | for use     |        | 8, minimum MUST     | (required |
   |          | with mac    |        | conform to          | for AES-  |
   |          |             |        | parameter set       | CCM)      |
   |          |             |        | requirements See    |           |
   |          |             |        | Section 3.6.2 ,     |           |
   |          |             |        | maximum SHALL NOT   |           |
   |          |             |        | exceed block size.. |           |
   |          |             |        |                     |           |
   +----------+-------------+--------+---------------------+-----------+

                   Table 11: KAS ECC Mac Option Details

3.10.  Supported KAS ECC KDF Options

   The following MAC options are available for registration under a
   "kdfNoKc" and "kdfKc" kasMode:

   o  concatenation

   o  asn1





Fussell & Hammett          Expires May 5, 2019                 [Page 17]

Internet-Draft                Sym Alg JSON                 November 2018


   +-----------+-----------------------+-------+------------+----------+
   | JSON      | Description           | JSON  | Valid      | Optional |
   | Value     |                       | type  | Values     |          |
   +-----------+-----------------------+-------+------------+----------+
   | oiPattern | The OI pattern to use | value | See        | No       |
   |           | for constructing      |       | Section    |          |
   |           | OtherInformation.     |       | 3.10.1 .   |          |
   |           |                       |       |            |          |
   +-----------+-----------------------+-------+------------+----------+

                   Table 12: KAS ECC KDF Option Details

3.10.1.  Other Information Construction

   Some IUTs MAY require a specific pattern for the OtherInfo portion of
   the KDFs for KAS.  An "oiPattern" is specified in the KDF
   registration to accommodate such requirements.  Regardless of the
   oiPattern specified, the OI bitlength MUST be 240 for FFC, and 376
   for ECC.  The OI SHALL be padded with random bits (or the most
   significant bits utilized) when the specified OI pattern does not
   meet the bitlength requirement

   Pattern candidates:

   o  literal[123456789ABCDEF]

      *  uses the specified hex within "[]". literal[123456789ABCDEF]
         substitutes "123456789ABCDEF" in place of the field

   o  uPartyInfo

      *  uPartyId { || dkmNonce }

         +  dkmNonce is provided by party u for static schemes

   o  vPartyInfo

      *  vPartyId

   o  counter

      *  32bit counter starting at "1" (0x00000001)

   Example (Note that party U is the server in this case "434156536964",
   party V is the IUT "a1b2c3d4e5", using an ECC non-static scheme):

   o  "concatenation" :
      "literal[123456789CAFECAFE]||uPartyInfo||vPartyInfo"



Fussell & Hammett          Expires May 5, 2019                 [Page 18]

Internet-Draft                Sym Alg JSON                 November 2018


   Evaluated as:

   o  "123456789CAFECAFE434156536964a1b2c3d4e5b16c5f78ef56e8c14a561"

   o  "b16c5f78ef56e8c14a561" are random bits applied to meet length
      requirements

3.11.  Supported KAS ECC KC Options

   The following KC options are available for registration under a
   "kdfKc" kasMode:

   +----------+----------------+------+---------------------+----------+
   | JSON     | Description    | JSON | Valid Values        | Optional |
   | Value    |                | type |                     |          |
   +----------+----------------+------+---------------------+----------+
   | kcRole   | The role(s)    | arra | provider/recipient  | No       |
   |          | the IUT is to  | y    |                     |          |
   |          | act as for Key |      |                     |          |
   |          | Confirmation.  |      |                     |          |
   |          |                |      |                     |          |
   | kcType   | The type(s)    | arra | unilateral/bilatera | No       |
   |          | the IUT is to  | y    | l                   |          |
   |          | act as for Key |      |                     |          |
   |          | Confirmation.  |      |                     |          |
   |          |                |      |                     |          |
   | nonceTyp | The nonce      | arra | randomNonce,        | No       |
   | e        | type(s) the    | y    | timestamp,          |          |
   |          | IUT is to use  |      | sequence,           |          |
   |          | for KeyConfirm |      | timestampSequence   |          |
   |          | ation.         |      |                     |          |
   |          |                |      |                     |          |
   +----------+----------------+------+---------------------+----------+

             Table 13: KAS ECC KC Option Details Capabilities

3.12.  Example KAS ECC Capabilities JSON Object

   The following is a example JSON object advertising support for KAS
   ECC.



{
        "algorithm": "KAS-ECC",
        "revision": "1.0",
        "prereqVals": [{
                        "algorithm": "ECDSA",



Fussell & Hammett          Expires May 5, 2019                 [Page 19]

Internet-Draft                Sym Alg JSON                 November 2018


                        "valValue": "123456"
                },
                {
                        "algorithm": "DRBG",
                        "valValue": "123456"
                },
                {
                        "algorithm": "SHA",
                        "valValue": "123456"
                },
                {
                        "algorithm": "CCM",
                        "valValue": "123456"
                },
                {
                        "algorithm": "CMAC",
                        "valValue": "123456"
                },
                {
                        "algorithm": "HMAC",
                        "valValue": "123456"
                }
        ],
        "function": ["keyPairGen", "dpGen"],
        "scheme": {
                "ephemeralUnified": {
                        "kasRole": ["initiator", "responder"],
                        "kdfNoKc": {
                                "kdfOption": {
                                        "concatenation": "uPartyInfo||vPartyInfo",
                                        "ASN1": "uPartyInfo||vPartyInfo"
                                },
                                "parameterSet": {
                                        "ec": {
                                                "curve": "K-283",
                                                "hashAlg": ["SHA2-224", "SHA2-256"],
                                                "macOption": {
                                                        "AES-CCM": {
                                                                "keyLen": [128],
                                                                "nonceLen": 56,
                                                                "macLen": 64
                                                        }
                                                }
                                        }
                                }
                        }
                }
        }



Fussell & Hammett          Expires May 5, 2019                 [Page 20]

Internet-Draft                Sym Alg JSON                 November 2018


}



3.13.  Example KAS ECC Component Capabilities JSON Object

   The following is a example JSON object advertising support for KAS
   ECC Component.











































Fussell & Hammett          Expires May 5, 2019                 [Page 21]

Internet-Draft                Sym Alg JSON                 November 2018


{
        "algorithm": "KAS-ECC",
        "mode": "Component",
        "revision": "1.0",
        "prereqVals": [{
                        "algorithm": "ECDSA",
                        "valValue": "123456"
                },
                {
                        "algorithm": "DRBG",
                        "valValue": "123456"
                },
                {
                        "algorithm": "SHA",
                        "valValue": "123456"
                },
                {
                        "algorithm": "CCM",
                        "valValue": "123456"
                },
                {
                        "algorithm": "CMAC",
                        "valValue": "123456"
                },
                {
                        "algorithm": "HMAC",
                        "valValue": "123456"
                }
        ],
        "function": ["keyPairGen", "dpGen"],
        "scheme": {
                "ephemeralUnified": {
                        "kasRole": ["initiator", "responder"],
                        "noKdfNoKc": {
                                "parameterSet": {
                                        "eb": {
                                                "curve": "P-224",
                                                "hashAlg": ["SHA2-224", "SHA2-256"]
                                        }
                                }
                        }
                }
        }
}







Fussell & Hammett          Expires May 5, 2019                 [Page 22]

Internet-Draft                Sym Alg JSON                 November 2018


4.  Generation requirements per party per scheme

   The various schemes of KAS all have their own requirements as to keys
   and nonces per scheme, per party.  The below table demonstrates those
   generation requirements:

   +------+-----+------+-------+---------+-------+-------+-------+-----+
   | Sche | Kas | KasR | KeyCo | KeyConf | Stati | Ephem | Ephem | Dkm |
   | me   | Mod | ole  | nfirm | irmatio | cKeyP | eralK | eralN | Non |
   |      | e   |      | ation | nDirect | air   | eyPai | once  | ce  |
   |      |     |      | Role  | ion     |       | r     |       |     |
   +------+-----+------+-------+---------+-------+-------+-------+-----+
   | DhHy | NoK | Init | None  | None    | True  | True  | False | Fal |
   | brid | dfN | iato |       |         |       |       |       | se  |
   | 1    | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | NoK | Resp | None  | None    | True  | True  | False | Fal |
   | brid | dfN | onde |       |         |       |       |       | se  |
   | 1    | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | None  | None    | True  | True  | False | Fal |
   | brid | NoK | iato |       |         |       |       |       | se  |
   | 1    | c   | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | None  | None    | True  | True  | False | Fal |
   | brid | NoK | onde |       |         |       |       |       | se  |
   | 1    | c   | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Provi | Unilate | True  | True  | False | Fal |
   | brid | Kc  | iato | der   | ral     |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Provi | Bilater | True  | True  | False | Fal |
   | brid | Kc  | iato | der   | al      |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Recip | Unilate | True  | True  | False | Fal |
   | brid | Kc  | iato | ient  | ral     |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Recip | Bilater | True  | True  | False | Fal |



Fussell & Hammett          Expires May 5, 2019                 [Page 23]

Internet-Draft                Sym Alg JSON                 November 2018


   | brid | Kc  | iato | ient  | al      |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Provi | Unilate | True  | True  | False | Fal |
   | brid | Kc  | onde | der   | ral     |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Provi | Bilater | True  | True  | False | Fal |
   | brid | Kc  | onde | der   | al      |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Recip | Unilate | True  | True  | False | Fal |
   | brid | Kc  | onde | ient  | ral     |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Recip | Bilater | True  | True  | False | Fal |
   | brid | Kc  | onde | ient  | al      |       |       |       | se  |
   | 1    |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | NoK | Init | None  | None    | True  | True  | False | Fal |
   |      | dfN | iato |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | NoK | Resp | None  | None    | True  | True  | False | Fal |
   |      | dfN | onde |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Init | None  | None    | True  | True  | False | Fal |
   |      | NoK | iato |       |         |       |       |       | se  |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Resp | None  | None    | True  | True  | False | Fal |
   |      | NoK | onde |       |         |       |       |       | se  |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Init | Provi | Unilate | True  | True  | False | Fal |
   |      | Kc  | iato | der   | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |



Fussell & Hammett          Expires May 5, 2019                 [Page 24]

Internet-Draft                Sym Alg JSON                 November 2018


   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Init | Provi | Bilater | True  | True  | False | Fal |
   |      | Kc  | iato | der   | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Init | Recip | Unilate | True  | True  | False | Fal |
   |      | Kc  | iato | ient  | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Init | Recip | Bilater | True  | True  | False | Fal |
   |      | Kc  | iato | ient  | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Resp | Provi | Unilate | True  | True  | False | Fal |
   |      | Kc  | onde | der   | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Resp | Provi | Bilater | True  | True  | False | Fal |
   |      | Kc  | onde | der   | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Resp | Recip | Unilate | True  | True  | False | Fal |
   |      | Kc  | onde | ient  | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv2 | Kdf | Resp | Recip | Bilater | True  | True  | False | Fal |
   |      | Kc  | onde | ient  | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhEp | NoK | Init | None  | None    | False | True  | False | Fal |
   | hem  | dfN | iato |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhEp | NoK | Resp | None  | None    | False | True  | False | Fal |
   | hem  | dfN | onde |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhEp | Kdf | Init | None  | None    | False | True  | False | Fal |
   | hem  | NoK | iato |       |         |       |       |       | se  |



Fussell & Hammett          Expires May 5, 2019                 [Page 25]

Internet-Draft                Sym Alg JSON                 November 2018


   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhEp | Kdf | Resp | None  | None    | False | True  | False | Fal |
   | hem  | NoK | onde |       |         |       |       |       | se  |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | NoK | Init | None  | None    | True  | True  | False | Fal |
   | brid | dfN | iato |       |         |       |       |       | se  |
   | OneF | oKc | rPar |       |         |       |       |       |     |
   | low  |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | NoK | Resp | None  | None    | True  | False | False | Fal |
   | brid | dfN | onde |       |         |       |       |       | se  |
   | OneF | oKc | rPar |       |         |       |       |       |     |
   | low  |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | None  | None    | True  | True  | False | Fal |
   | brid | NoK | iato |       |         |       |       |       | se  |
   | OneF | c   | rPar |       |         |       |       |       |     |
   | low  |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | None  | None    | True  | False | False | Fal |
   | brid | NoK | onde |       |         |       |       |       | se  |
   | OneF | c   | rPar |       |         |       |       |       |     |
   | low  |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Provi | Unilate | True  | True  | False | Fal |
   | brid | Kc  | iato | der   | ral     |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Provi | Bilater | True  | True  | False | Fal |
   | brid | Kc  | iato | der   | al      |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Recip | Unilate | True  | True  | False | Fal |
   | brid | Kc  | iato | ient  | ral     |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Init | Recip | Bilater | True  | True  | False | Fal |
   | brid | Kc  | iato | ient  | al      |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |



Fussell & Hammett          Expires May 5, 2019                 [Page 26]

Internet-Draft                Sym Alg JSON                 November 2018


   | DhHy | Kdf | Resp | Provi | Unilate | True  | False | False | Fal |
   | brid | Kc  | onde | der   | ral     |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Provi | Bilater | True  | False | True  | Fal |
   | brid | Kc  | onde | der   | al      |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Recip | Unilate | True  | False | True  | Fal |
   | brid | Kc  | onde | ient  | ral     |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhHy | Kdf | Resp | Recip | Bilater | True  | False | True  | Fal |
   | brid | Kc  | onde | ient  | al      |       |       |       | se  |
   | OneF |     | rPar |       |         |       |       |       |     |
   | low  |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | NoK | Init | None  | None    | True  | True  | False | Fal |
   |      | dfN | iato |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | NoK | Resp | None  | None    | True  | False | False | Fal |
   |      | dfN | onde |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Init | None  | None    | True  | True  | False | Fal |
   |      | NoK | iato |       |         |       |       |       | se  |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Resp | None  | None    | True  | False | False | Fal |
   |      | NoK | onde |       |         |       |       |       | se  |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Init | Provi | Unilate | True  | True  | False | Fal |
   |      | Kc  | iato | der   | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Init | Provi | Bilater | True  | True  | False | Fal |
   |      | Kc  | iato | der   | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |



Fussell & Hammett          Expires May 5, 2019                 [Page 27]

Internet-Draft                Sym Alg JSON                 November 2018


   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Init | Recip | Unilate | True  | True  | False | Fal |
   |      | Kc  | iato | ient  | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Init | Recip | Bilater | True  | True  | False | Fal |
   |      | Kc  | iato | ient  | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Resp | Provi | Unilate | True  | False | False | Fal |
   |      | Kc  | onde | der   | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Resp | Provi | Bilater | True  | False | True  | Fal |
   |      | Kc  | onde | der   | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Resp | Recip | Unilate | True  | False | True  | Fal |
   |      | Kc  | onde | ient  | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | Mqv1 | Kdf | Resp | Recip | Bilater | True  | False | True  | Fal |
   |      | Kc  | onde | ient  | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhOn | NoK | Init | None  | None    | False | True  | False | Fal |
   | eFlo | dfN | iato |       |         |       |       |       | se  |
   | w    | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhOn | NoK | Resp | None  | None    | True  | False | False | Fal |
   | eFlo | dfN | onde |       |         |       |       |       | se  |
   | w    | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhOn | Kdf | Init | None  | None    | False | True  | False | Fal |
   | eFlo | NoK | iato |       |         |       |       |       | se  |
   | w    | c   | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhOn | Kdf | Resp | None  | None    | True  | False | False | Fal |



Fussell & Hammett          Expires May 5, 2019                 [Page 28]

Internet-Draft                Sym Alg JSON                 November 2018


   | eFlo | NoK | onde |       |         |       |       |       | se  |
   | w    | c   | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhOn | Kdf | Init | Recip | Unilate | False | True  | False | Fal |
   | eFlo | Kc  | iato | ient  | ral     |       |       |       | se  |
   | w    |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhOn | Kdf | Resp | Provi | Unilate | True  | False | False | Fal |
   | eFlo | Kc  | onde | der   | ral     |       |       |       | se  |
   | w    |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | NoK | Init | None  | None    | True  | False | False | Fal |
   | atic | dfN | iato |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | NoK | Resp | None  | None    | True  | False | False | Fal |
   | atic | dfN | onde |       |         |       |       |       | se  |
   |      | oKc | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Init | None  | None    | True  | False | False | Tru |
   | atic | NoK | iato |       |         |       |       |       | e   |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Resp | None  | None    | True  | False | False | Fal |
   | atic | NoK | onde |       |         |       |       |       | se  |
   |      | c   | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Init | Provi | Unilate | True  | False | False | Tru |
   | atic | Kc  | iato | der   | ral     |       |       |       | e   |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Init | Provi | Bilater | True  | False | False | Tru |
   | atic | Kc  | iato | der   | al      |       |       |       | e   |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Init | Recip | Unilate | True  | False | False | Tru |
   | atic | Kc  | iato | ient  | ral     |       |       |       | e   |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |



Fussell & Hammett          Expires May 5, 2019                 [Page 29]

Internet-Draft                Sym Alg JSON                 November 2018


   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Init | Recip | Bilater | True  | False | False | Tru |
   | atic | Kc  | iato | ient  | al      |       |       |       | e   |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyU  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Resp | Provi | Unilate | True  | False | False | Fal |
   | atic | Kc  | onde | der   | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Resp | Provi | Bilater | True  | False | True  | Fal |
   | atic | Kc  | onde | der   | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Resp | Recip | Unilate | True  | False | True  | Fal |
   | atic | Kc  | onde | ient  | ral     |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   | DhSt | Kdf | Resp | Recip | Bilater | True  | False | True  | Fal |
   | atic | Kc  | onde | ient  | al      |       |       |       | se  |
   |      |     | rPar |       |         |       |       |       |     |
   |      |     | tyV  |       |         |       |       |       |     |
   |      |     |      |       |         |       |       |       |     |
   +------+-----+------+-------+---------+-------+-------+-------+-----+

              Table 14: Required Party Generation Obligations

5.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual KAS ECC function.  This section
   describes the JSON schema for a test vector set used with KAS ECC
   algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.The following table
   describes the JSON elements at the top level of the hierarchy.







Fussell & Hammett          Expires May 5, 2019                 [Page 30]

Internet-Draft                Sym Alg JSON                 November 2018


   +------------+---------------------------------------------+--------+
   | JSON Value | Description                                 | JSON   |
   |            |                                             | type   |
   +------------+---------------------------------------------+--------+
   | acvVersion | Protocol version identifier                 | value  |
   |            |                                             |        |
   | vsId       | Unique numeric identifier for the vector    | value  |
   |            | set                                         |        |
   |            |                                             |        |
   | algorithm  | KAS-ECC                                     | value  |
   |            |                                             |        |
   | revision   | The algorithm testing revision to use.      | value  |
   |            |                                             |        |
   | type       | Type of operation supported                 | value  |
   |            |                                             |        |
   | testGroups | Array of test group JSON objects, which are | array  |
   |            | defined in Section 5.1                      |        |
   +------------+---------------------------------------------+--------+

                     Table 15: Vector Set JSON Object

5.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the secure hash JSON elements of the Test
   Group JSON object.

   The test group for KAS ECC is as follows:

   +----------------+----------------------+----------------+----------+
   | JSON Value     | Description          | JSON type      | Optional |
   +----------------+----------------------+----------------+----------+
   | tgId           | Numeric identifier   | value          | No       |
   |                | for the test group,  |                |          |
   |                | unique across the    |                |          |
   |                | entire vector set.   |                |          |
   |                |                      |                |          |
   | scheme         | The scheme for the   | value          | No       |
   |                | test vectors. See    |                |          |
   |                | Section 3.4.1 for    |                |          |
   |                | possible values      |                |          |
   |                |                      |                |          |
   | testType       | The type of          | AFT, VAL       | No       |



Fussell & Hammett          Expires May 5, 2019                 [Page 31]

Internet-Draft                Sym Alg JSON                 November 2018


   |                | testCases expected   |                |          |
   |                | within the group.    |                |          |
   |                | AFT (Functional)     |                |          |
   |                | tests produce test   |                |          |
   |                | cases where the      |                |          |
   |                | prompt file delivers |                |          |
   |                | only the needed      |                |          |
   |                | public server        |                |          |
   |                | information in which |                |          |
   |                | the IUT is expected  |                |          |
   |                | to perform KAS. VAL  |                |          |
   |                | (Validity) tests     |                |          |
   |                | produce              |                |          |
   |                | inputs/outputs from  |                |          |
   |                | both server and IUT  |                |          |
   |                | perspectives of a    |                |          |
   |                | KAS negotiation. The |                |          |
   |                | expectation of the   |                |          |
   |                | IUT on such tests is |                |          |
   |                | to determine if the  |                |          |
   |                | KAS negotiation was  |                |          |
   |                | successful or not.   |                |          |
   |                |                      |                |          |
   | kasRole        | The KAS role         | initiator,     | No       |
   |                |                      | responder      |          |
   |                |                      |                |          |
   | kasMode        | The KAS mode         | noKdfNoKc,     | No       |
   |                |                      | kdfNoKc, kdfKc |          |
   |                |                      |                |          |
   | parmSet        | Parameter set value  | eb, ec, ed, ee | No       |
   |                | to use               |                |          |
   |                |                      |                |          |
   | hashAlg        | hashAlg values being | See Section    | No       |
   |                | used                 | 3.8            |          |
   |                |                      |                |          |
   | macType        | The MAC being used.  | See Section    | Yes      |
   |                | REQUIRED for         | 3.9            |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | keyLen         | The key length of    | See Section    | Yes      |
   |                | the MAC. REQUIRED    | 3.9            |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | nonceAesCcmLen | The nonce length of  | See Section    | Yes      |
   |                | the MAC (applies     | 3.9            |          |
   |                | only to AES-CCM).    |                |          |



Fussell & Hammett          Expires May 5, 2019                 [Page 32]

Internet-Draft                Sym Alg JSON                 November 2018


   |                | REQUIRED for         |                |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes using  |                |          |
   |                | a AES-CCM MAC.       |                |          |
   |                |                      |                |          |
   | macLen         | The mac length.      | See Section    | Yes      |
   |                | REQUIRED for         | 3.9            |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | kdfType        | The KDF being used.  | concatenation, | Yes      |
   |                | REQUIRED for         | asn1           |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | idServerLen    | The length of the    | value          | Yes      |
   |                | server ID. REQUIRED  |                |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | idServer       | The server ID.       | value          | Yes      |
   |                | REQUIRED for         |                |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | idIutLen       | The length of the    | value          | Yes      |
   |                | server ID. REQUIRED  |                |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                | Provided in response |                |          |
   |                | by IUT for AFT       |                |          |
   |                | tests.               |                |          |
   |                |                      |                |          |
   | idIut          | The server ID.       | value          | Yes      |
   |                | REQUIRED for         |                |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                | Provided in response |                |          |
   |                | by IUT for AFT       |                |          |
   |                | tests.               |                |          |
   |                |                      |                |          |
   | oiPattern      | The oiPattern used   | See Section    | Yes      |
   |                | in the KDF. REQUIRED | 3.10.1         |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | kcRole         | Key confirmation     | provider,      | Yes      |
   |                | roles supported.     | recipient      |          |



Fussell & Hammett          Expires May 5, 2019                 [Page 33]

Internet-Draft                Sym Alg JSON                 November 2018


   |                | REQUIRED for "kdfKc" |                |          |
   |                | modes.               |                |          |
   |                |                      |                |          |
   | kcType         | Key confirmation     | unilateral     | Yes      |
   |                | types supported.     | and/or         |          |
   |                | REQUIRED for "kdfKc" | bilateral      |          |
   |                | modes.               |                |          |
   |                |                      |                |          |
   | curve          | The curve useds for  | value          | No       |
   |                | keypair generation   |                |          |
   |                |                      |                |          |
   | tests          | Array of individual  | array          | No       |
   |                | test vector JSON     |                |          |
   |                | objects, which are   |                |          |
   |                | defined in Section   |                |          |
   |                | 5.2                  |                |          |
   +----------------+----------------------+----------------+----------+

                    Table 16: Vector Group JSON Object

5.2.  Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each KAS ECC test vector.

   +-----------------------+----------------------+---------+----------+
   | JSON Value            | Description          | JSON    | Optional |
   |                       |                      | type    |          |
   +-----------------------+----------------------+---------+----------+
   | tcId                  | Numeric identifier   | value   | No       |
   |                       | for the test case,   |         |          |
   |                       | unique across the    |         |          |
   |                       | entire vector set.   |         |          |
   |                       |                      |         |          |
   | staticPublicServerX   | The ECDSA static     | value   | Yes      |
   |                       | public key X         |         |          |
   |                       | coordinate           |         |          |
   |                       |                      |         |          |
   | staticPublicServerY   | The ECDSA static     | value   | Yes      |
   |                       | public key Y         |         |          |
   |                       | coordinate           |         |          |
   |                       |                      |         |          |
   | ephemeralPublicServer | The ECDSA ephemeral  | value   | Yes      |
   | X                     | public key X         |         |          |
   |                       | coordinate           |         |          |
   |                       |                      |         |          |



Fussell & Hammett          Expires May 5, 2019                 [Page 34]

Internet-Draft                Sym Alg JSON                 November 2018


   | ephemeralPublicServer | The ECDSA ephemeral  | value   | Yes      |
   | Y                     | public key Y         |         |          |
   |                       | coordinate           |         |          |
   |                       |                      |         |          |
   | nonceEphemeralServer  | nonceEphemeralServer | value   | Yes      |
   |                       | ONLY USED BY C(1,2)  |         |          |
   |                       | and C(0,2) schemes   |         |          |
   |                       | with KC. nonce to be |         |          |
   |                       | used in the MacData  |         |          |
   |                       | field                |         |          |
   |                       |                      |         |          |
   | nonceNoKc             | The 16 byte nonce    | value   | Yes      |
   |                       | concatenated to the  |         |          |
   |                       | "Standard Test       |         |          |
   |                       | Message". Used for   |         |          |
   |                       | No Key Confirmation  |         |          |
   |                       | tests only.          |         |          |
   |                       |                      |         |          |
   | nonceDkm              | The nonce supplied   | value   | Yes      |
   |                       | by the initiator to  |         |          |
   |                       | be used in the OI    |         |          |
   |                       | field in the         |         |          |
   |                       | PartyUInfo field.    |         |          |
   |                       |                      |         |          |
   | staticPrivateIut      | The IUT ECDSA static | value   | Yes      |
   |                       | private key          |         |          |
   |                       |                      |         |          |
   | staticPublicIutX      | The IUT ECDSA static | value   | Yes      |
   |                       | public key X         |         |          |
   |                       | coordinate           |         |          |
   |                       |                      |         |          |
   | staticPublicIutY      | The IUT ECDSA static | value   | Yes      |
   |                       | public key Y         |         |          |
   |                       | coordinate           |         |          |
   |                       |                      |         |          |
   | ephemeralPrivateIut   | The IUT ECDSA        | value   | Yes      |
   |                       | ephemeral private    |         |          |
   |                       | key                  |         |          |
   |                       |                      |         |          |
   | ephemeralPublicIutX   | The IUT ECDSA        | value   | Yes      |
   |                       | ephemeral public key |         |          |
   |                       | X coordinate         |         |          |
   |                       |                      |         |          |
   | ephemeralPublicIutY   | The IUT ECDSA        | value   | Yes      |
   |                       | ephemeral public key |         |          |
   |                       | Y coordinate         |         |          |
   |                       |                      |         |          |
   | oiLen                 | Length of the        | value   | Yes      |



Fussell & Hammett          Expires May 5, 2019                 [Page 35]

Internet-Draft                Sym Alg JSON                 November 2018


   |                       | OtherInfo field      |         |          |
   |                       |                      |         |          |
   | oi                    | OtherInfo field      | value   | Yes      |
   |                       |                      |         |          |
   | dkm                   | Derived Keying       | value   | Yes      |
   |                       | Material.            |         |          |
   |                       |                      |         |          |
   | tagIut                | The tag (or MAC)     | value   | Yes      |
   |                       | GENERATED BY THE     |         |          |
   |                       | SERVER/IUT by using  |         |          |
   |                       | the DKM to MAC the   |         |          |
   |                       | Message with the     |         |          |
   |                       | specified method     |         |          |
   |                       |                      |         |          |
   | nonceEphemeralIut     | nonceEphemeralIut    | value   | Yes      |
   |                       | ONLY USED BY C(1,2)  |         |          |
   |                       | and C(0,2) schemes   |         |          |
   |                       | with KC. nonce to be |         |          |
   |                       | used in the MacData  |         |          |
   |                       | field                |         |          |
   |                       |                      |         |          |
   | nonceDkmIut           | ONLY USED BY STATIC  | value   | Yes      |
   |                       | SCHEME. The nonce    |         |          |
   |                       | supplied by the      |         |          |
   |                       | initiator to be used |         |          |
   |                       | in the OI field in   |         |          |
   |                       | the PartyUInfo field |         |          |
   |                       |                      |         |          |
   | nonceLenDkm           | ONLY USED BY STATIC  | value   | Yes      |
   |                       | SCHEME. The length   |         |          |
   |                       | of the nonce         |         |          |
   |                       | supplied by the      |         |          |
   |                       | initiator to be used |         |          |
   |                       | in the OI field in   |         |          |
   |                       | the PartyUInfo       |         |          |
   |                       | field.               |         |          |
   |                       |                      |         |          |
   | nonceEphemeralDkm     | ONLY USED BY C(1,2)  | value   | Yes      |
   |                       | and C(0,2) schemes   |         |          |
   |                       | with KC. nonce to be |         |          |
   |                       | used in the MacData  |         |          |
   |                       | field                |         |          |
   |                       |                      |         |          |
   | nonceEphemralDkmLen   | length of            | value   | Yes      |
   |                       | nonceEphemeralIut    |         |          |
   |                       | value.               |         |          |
   |                       |                      |         |          |
   | nonceAesCcm           | Nonce used by the    | value   | Yes      |



Fussell & Hammett          Expires May 5, 2019                 [Page 36]

Internet-Draft                Sym Alg JSON                 November 2018


   |                       | CCM function, if CCM |         |          |
   |                       | is used to generate  |         |          |
   |                       | the Tag.             |         |          |
   |                       |                      |         |          |
   | macData               | The message to be    | value   | Yes      |
   |                       | MAced.               |         |          |
   |                       |                      |         |          |
   | z                     | A shared secret that | value   | Yes      |
   |                       | is used to derive    |         |          |
   |                       | secret keying        |         |          |
   |                       | material using a key |         |          |
   |                       | derivation function. |         |          |
   |                       |                      |         |          |
   | hashZServer           | The hashed shared    | value   | Yes      |
   |                       | secret, only         |         |          |
   |                       | provided in          |         |          |
   |                       | noKdfNoKc modes of   |         |          |
   |                       | operation.           |         |          |
   |                       |                      |         |          |
   | hashZIut              | The hashed shared    | value   | Yes      |
   |                       | secret, only         |         |          |
   |                       | provided in          |         |          |
   |                       | noKdfNoKc modes of   |         |          |
   |                       | operation.           |         |          |
   |                       |                      |         |          |
   | testPassed            | Pass Fail indicating | boolean | Yes      |
   |                       | if the IUT agrees    |         |          |
   |                       | with the Tag         |         |          |
   |                       | generated by the     |         |          |
   |                       | server.              |         |          |
   +-----------------------+----------------------+---------+----------+

                      Table 17: Test Case JSON Object

5.3.  Example Test Vectors JSON Object

   The following is a example JSON object for KAS ECC test vectors sent
   from the ACVP server to the crypto module.


[{
                "acvVersion": <acvp-version>
        },
        {
                "vsId": 1564,
                "algorithm": "KAS-ECC",
                "revision": "1.0",
                "testGroups": [



Fussell & Hammett          Expires May 5, 2019                 [Page 37]

Internet-Draft                Sym Alg JSON                 November 2018


                        {
                "tgId": 1,
                                "scheme": "ephemeralUnified",
                                "testType": "AFT",
                                "kasRole": "initiator",
                                "kasMode": "kdfNoKc",
                                "parmSet": "ec",
                                "hashAlg": "SHA2-256",
                                "macType": "AES-CCM",
                                "keyLen": 128,
                                "aesCcmNonceLen": 64,
                                "macLen": 128,
                                "kdfType": "asn1",
                                "idServerLen": 48,
                                "idServer": "434156536964",
                                "curve": "P-256",
                                "tests": [{
                                        "tcId": 151,
                                        "ephemeralPublicServerX": "CBC9AF2F0FCE0F06643D7524DCCA96C78564BA77196C5F5F65DC0A119409A1F3",
                                        "ephemeralPublicServerY": "B619EBE85F2EC5E0A9B542CC77539D698C96CA5D0BDFCA224787C30CF971E3F4",
                                        "nonceNoKc": "BBDF1A42C9405B58B8329D583C437331",
                                        "nonceAesCcm": "FF5B0FD5F295257B"
                                }]
                        },
                        {
                "tgId": 2,
                                "scheme": "ephemeralUnified",
                                "testType": "AFT",
                                "kasRole": "responder",
                                "kasMode": "kdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "macType": "HMAC-SHA2-224",
                                "keyLen": 128,
                                "macLen": 128,
                                "kdfType": "asn1",
                                "idServerLen": 48,
                                "idServer": "434156536964",
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 161,
                                        "ephemeralPublicServerX": "FFAD4CDB4293F61C2A74566FD4323A03C6BB3F9D6526D8E0506B2186",
                                        "ephemeralPublicServerY": "0D614DAA05395A5FDF51BC769AEC355C9688ECEFCF2FE10E6DC1030E",
                                        "nonceNoKc": "BEAB1A2CB8406A7083105EC234603A80"
                                }]
                        },
                        {
                "tgId": 3,



Fussell & Hammett          Expires May 5, 2019                 [Page 38]

Internet-Draft                Sym Alg JSON                 November 2018


                                "scheme": "ephemeralUnified",
                                "testType": "VAL",
                                "kasRole": "initiator",
                                "kasMode": "kdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "macType": "HMAC-SHA2-224",
                                "keyLen": 128,
                                "macLen": 128,
                                "kdfType": "asn1",
                                "idServerLen": 48,
                                "idServer": "434156536964",
                                "idIutLen": 0,
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 181,
                                        "ephemeralPublicServerX": "D489605D37C4F555E50D8F010BEE3165B93F7C749263C4BF3E9A4808",
                                        "ephemeralPublicServerY": "23C8167ACFB24DC62D6747960330471B28DC646E04E593DBE6F8F1A4",
                                        "nonceNoKc": "6BBFEECEBBD5200C5FAE050526A77342",
                                        "ephemeralPrivateIut": "343936401C5F88E658E2C9C47C2EB48DDE10506684D8B55027C05A15",
                                        "ephemeralPublicIutX": "14AA2C1ECDC258FE8AD035E9A2872CD14466783F82F5F3F8D757133A",
                                        "ephemeralPublicIutY": "8DD3D48BF9115EA5AB7A479FB1DAB0A46BCD6B4D1A306D5CAC254EC1",
                                        "oiLen": 376,
                                        "otherInfo": "A1B2C3D4E5434156536964CAFECAFE2D822B413172BB3012AA986AFFAE95B46360E00AAD0D0548104C1F946389B97D",
                                        "tagIut": "5EEE5D912191984D89DF074B9A885411"
                                }]
                        },
                        {
                "tgId": 4,
                                "scheme": "ephemeralUnified",
                                "testType": "VAL",
                                "kasRole": "responder",
                                "kasMode": "kdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "macType": "AES-CCM",
                                "keyLen": 128,
                                "aesCcmNonceLen": 64,
                                "macLen": 128,
                                "kdfType": "asn1",
                                "idServerLen": 48,
                                "idServer": "434156536964",
                                "idIutLen": 0,
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 231,
                                        "ephemeralPublicServerX": "A0457CF2F5D38B72FF1BF3A2CF4C7CE30F215B5E52A53C39193B1639",
                                        "ephemeralPublicServerY": "38CA7951888E462D6C5F4E46FA953FF231F43D5A4F3FEBAEEBF3D52B",



Fussell & Hammett          Expires May 5, 2019                 [Page 39]

Internet-Draft                Sym Alg JSON                 November 2018


                                        "nonceNoKc": "A889762176F5F02F8C1E4BBC0C669805",
                                        "ephemeralPrivateIut": "5F76009454AE9158797467C297229569C6E2027D6AFC226A63489444",
                                        "ephemeralPublicIutX": "1060CEE336B183738952CF13760D542E2F3AA60124D560EFA10F392C",
                                        "ephemeralPublicIutY": "216EA3B35E630A1EA4A91C430E5B63306A83624F0FFD8ADFF63A380E",
                                        "oiLen": 376,
                                        "otherInfo": "454156536964A1B2C3D4E5CAFECAFE9EF1EA2DC20EE820E7562CDD4DBCD5FD8CD57DB1F54961D8B0C83342C09B7D72",
                                        "nonceAesCcm": "BD79B8A8D5559128",
                                        "tagIut": "5CC10EF2564B0CD23D746A47DB5B98A2"
                                }]
                        }
                ]
        }
]


5.4.  Example Test Vectors Component JSON Object

   The following is a example JSON object for KAS ECC Component test
   vectors sent from the ACVP server to the crypto module.


[{
                "acvVersion": <acvp-version>
        },
        {
                "vsId": 1565,
                "algorithm": "KAS-ECC",
                "mode": "Component",
                "revision": "1.0",
                "testGroups": [{
                "tgId": 1,
                                "scheme": "ephemeralUnified",
                                "testType": "AFT",
                                "kasRole": "initiator",
                                "kasMode": "noKdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 1,
                                        "ephemeralPublicServerX": "DACE4B35FD720DDD6B307777EBAFE53859C5FC2D330755B05B061CEB",
                                        "ephemeralPublicServerY": "195344DE0C79898C5C060BFACE1D24FDE1127ECF503EA04B08FFB9F1"
                                }]
                        }, {
                "tgId": 2,
                                "scheme": "ephemeralUnified",
                                "testType": "AFT",
                                "kasRole": "responder",



Fussell & Hammett          Expires May 5, 2019                 [Page 40]

Internet-Draft                Sym Alg JSON                 November 2018


                                "kasMode": "noKdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 21,
                                        "ephemeralPublicServerX": "747EDBB8F62E1F06BD542FC2DD93169CB24DA6EF9E2FED4FE60FCBE6",
                                        "ephemeralPublicServerY": "C7FB2C3C9B95E70D908B9992C8018B785F7BCD3E5967E37EFB18A422"
                                }]
                        },
                        {
                "tgId": 3,
                                "scheme": "ephemeralUnified",
                                "testType": "VAL",
                                "kasRole": "initiator",
                                "kasMode": "noKdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 41,
                                        "ephemeralPublicServerX": "866BD81E951787AA1130CB67BA48E22F8A9E7EFF0713418B4FB8A31C",
                                        "ephemeralPublicServerY": "050C9E3DB4560313979FE465AC8624E93BC0D97E7C68AC589840BCF7",
                                        "ephemeralPrivateIut": "0C9AE6286544FED81921E6495B946C6AF39DF90EC68379CEF2F7C69D",
                                        "ephemeralPublicIutX": "CA296A5C86EC39C4EA626A8D9AB39DE5D5092FAA3AE2F241D7791497",
                                        "ephemeralPublicIutY": "F768358D14A428C61A3229FB4BB752F02ECC1F54763CA98655A8412C",
                                        "hashZIut": "FC6268A34B63B5A82AF03A6CABE61C69CC57317E5E8C8F508FCB82D0"
                                }]
                        },
                        {
                "tgId": 4,
                                "scheme": "ephemeralUnified",
                                "testType": "VAL",
                                "kasRole": "responder",
                                "kasMode": "noKdfNoKc",
                                "parmSet": "eb",
                                "hashAlg": "SHA2-224",
                                "curve": "P-224",
                                "tests": [{
                                        "tcId": 91,
                                        "ephemeralPublicServerX": "7A2EBA553C4DC0E4D7A19A3648BA9713496EB462B1B7D83D375F7FFD",
                                        "ephemeralPublicServerY": "5972BF3B114612AA5BBA14D0BE956DED03359F52ADDF0B9C2D0314E1",
                                        "ephemeralPrivateIut": "9AEDA69CE438C6F8592CE3B8E14E92BE9143E82B3EED42CF62E45BF7",
                                        "ephemeralPublicIutX": "941DAF3C527D2B76AA907F60C208F8987681972E466529CA8BD962FD",
                                        "ephemeralPublicIutY": "F381EC5DBEA7F6EA3A09D2D75372C014C3DE3ECABBBBC00DDFB97359",
                                        "hashZIut": "BB61FA1DCA5D93A6FBB43317AABCAE22A3EDF7F72216516115935D4E"
                                }]
                        }



Fussell & Hammett          Expires May 5, 2019                 [Page 41]

Internet-Draft                Sym Alg JSON                 November 2018


                ]
        }
]


6.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

   +------------+---------------------------------------------+--------+
   | JSON Value | Description                                 | JSON   |
   |            |                                             | type   |
   +------------+---------------------------------------------+--------+
   | acvVersion | Protocol version identifier                 | value  |
   |            |                                             |        |
   | vsId       | Unique numeric identifier for the vector    | value  |
   |            | set                                         |        |
   |            |                                             |        |
   | testGroups | Array of JSON objects that represent each   | array  |
   |            | test vector group. See Table 19             |        |
   +------------+---------------------------------------------+--------+

                 Table 18: Vector Set Response JSON Object

   The testGroups section is used to organize the ACVP client response
   in a similar manner to how it receives vectors.  Several algorithms
   SHALL require the client to send back group level properties in their
   response.  This structure helps accommodate that.

   +-----------+--------------------------------------------+----------+
   | JSON      | Description                                | JSON     |
   | Value     |                                            | type     |
   +-----------+--------------------------------------------+----------+
   | tgId      | The test group Id                          | value    |
   |           |                                            |          |
   | tests     | The tests associated to the group          | value    |
   |           | specified in tgId                          |          |
   |           |                                            |          |
   +-----------+--------------------------------------------+----------+

              Table 19: Vector Set Group Response JSON Object







Fussell & Hammett          Expires May 5, 2019                 [Page 42]

Internet-Draft                Sym Alg JSON                 November 2018


6.1.  Example Test Results JSON Object

   The following is a example JSON object for KAS ECC test results sent
   from the crypto module to the ACVP server.


[{
                "acvVersion": <acvp-version>
        },
        {
                "vsId": 1564,
                "testGroups": [{
                                "tgId": 1,
                                "tests": [{
                                        "tcId": 151,
                                        "nonceNoKc": "BBDF1A42C9405B58B8329D583C437331",
                                        "ephemeralPublicIutX": "F90FE5B7D5DA0F7849B0849D780143F4CC7E9F080465AA05DBD3E610D6B24763",
                                        "ephemeralPublicIutY": "1D746A8F960AE8425C63DE17618362F7040365D9168F21A0762526ECCC556084",
                                        "idIutLen": 40,
                                        "idIut": "A1B2C3D4E5",
                                        "oiLen": 376,
                                        "oi": "A1B2C3D4E5434156536964CAFECAFEA0988C0EB862E29CBFBD0B087D3223B9052811800B2D1ADF1D42AE73BAAD162A",
                                        "nonceAesCcm": "FF5B0FD5F295257B",
                                        "tagIut": "FF1ADCA06E582AD9E4A8B7FE3D7D9C28"
                                }]
                        },
                        {
                                "tgId": 2,
                                "tests": [{
                                        "tcId": 161,
                                        "nonceNoKc": "BEAB1A2CB8406A7083105EC234603A80",
                                        "ephemeralPublicIutX": "C5D934686BAB0E156D4F5CF1BDA7B044128C803E4C8AA2D9B0024FC0",
                                        "ephemeralPublicIutY": "E2D8973A51A9CE0FA7FAD8A444ECAB518C672C65313BEE4150CFD50E",
                                        "idIutLen": 40,
                                        "idIut": "A1B2C3D4E5",
                                        "oiLen": 376,
                                        "oi": "434156536964A1B2C3D4E5CAFECAFE9D9E4AB0A187C117158C9A234F4AEE8328714003BFED6C08A7F191E61DCA2B6A",
                                        "tagIut": "77587ED9D13B811F200214FD5E1F864A"
                                }]
                        },
                        {
                                "tgId": 3,
                                "tests": [{
                                        "tcId": 181,
                                        "testPassed": false
                                }]
                        },
                        {



Fussell & Hammett          Expires May 5, 2019                 [Page 43]

Internet-Draft                Sym Alg JSON                 November 2018


                                "tgId": 4,
                                "tests": [{
                                        "tcId": 231,
                                        "testPassed": false
                                }]
                        }
                ]
        }
]


6.2.  Example Test Results Component JSON Object

   The following is a example JSON object for KAS ECC Component test
   results sent from the crypto module to the ACVP server.




































Fussell & Hammett          Expires May 5, 2019                 [Page 44]

Internet-Draft                Sym Alg JSON                 November 2018


[{
                "acvVersion": <acvp-version>
        },
        {
                "vsId": 1564,
                "testGroups": [{
                                "tgId": 1,
                                "tests": [{
                                        "tcId": 1,
                                        "ephemeralPublicIutX": "50471CE7F6FE2CAD6C901F85BF258E84571D3C88F59356B91DDBF286",
                                        "ephemeralPublicIutY": "5B8A7BC07BE15F28D34AA8324DEE93C715F569D3AF4820209F6452E7",
                                        "hashZIut": "96DCAF87127AB615896CCD0479C8BEAFD7EE111F384C962687D28ACC"
                                }]
                        },
                        {
                                "tgId": 2,
                                "tests": [{
                                        "tcId": 21,
                                        "ephemeralPublicIutX": "3E95CE4241A63C4ECBDC12CF2A3FB9E56222C0D395885CF0B51B04F7",
                                        "ephemeralPublicIutY": "F8865F76DE98CFCFBBAD2E99A317636F48AC874847E0A489C96631EC",
                                        "hashZIut": "3B7721F7514C09DD38D62E72E20D0375A7B3AC5BD837A7B860BC65FA"
                                }]
                        },
                        {
                                "tgId": 3,
                                "tests": [{
                                        "tcId": 41,
                                        "testPassed": false
                                }]
                        },
                        {
                                "tgId": 4,
                                "tests": [{
                                        "tcId": 91,
                                        "testPassed": true
                                }]
                        }
                ]
        }
]


7.  ECC CDH Component Test

   The ECC CDH Component Test






Fussell & Hammett          Expires May 5, 2019                 [Page 45]

Internet-Draft                Sym Alg JSON                 November 2018


7.1.  ECC CDH Component Capabilities JSON Values

   Each algorithm capability advertised is a self-contained JSON object
   using the following values.

   +-----------+-------------+--------------+---------------+----------+
   | JSON      | Description | JSON type    | Valid Values  | Optional |
   | Value     |             |              |               |          |
   +-----------+-------------+--------------+---------------+----------+
   | algorithm | The         | value        | KAS-ECC       | No       |
   |           | algorithm   |              |               |          |
   |           | under test  |              |               |          |
   |           |             |              |               |          |
   | mode      | The         | value        | CDH-Component | No       |
   |           | algorithm   |              |               |          |
   |           | mode        |              |               |          |
   |           |             |              |               |          |
   | revision  | The         | value        | "1.0"         | No       |
   |           | algorithm   |              |               |          |
   |           | testing     |              |               |          |
   |           | revision to |              |               |          |
   |           | use.        |              |               |          |
   |           |             |              |               |          |
   | prereqVal | Prerequisit | array of     | See Section   | No       |
   | s         | e algorithm | prereqAlgVal | 3.1           |          |
   |           | validations | objects      |               |          |
   |           |             |              |               |          |
   | curve     | Array of    | array        | See Section   | No       |
   |           | supported   |              | 3.7           |          |
   |           | curves      |              |               |          |
   |           |             |              |               |          |
   +-----------+-------------+--------------+---------------+----------+

           Table 20: KAS ECC Component Capabilities JSON Values

7.1.1.  Example KAS ECC CDH-Component Capabilities JSON Object

   The following is a example JSON object advertising support for KAS
   ECC CDH-Component.












Fussell & Hammett          Expires May 5, 2019                 [Page 46]

Internet-Draft                Sym Alg JSON                 November 2018


   {
           "algorithm": "KAS-ECC",
           "mode": "CDH-Component",
           "revision": "1.0",
           "prereqVals": [{
                   "algorithm": "ECDSA",
                   "valValue": "123456"
           }],
           "function": ["keyPairGen", "dpGen"],
           "curve": ["p-192", "k-163", "b-163"]
   }



7.2.  ECC CDH Component TestVectors JSON Values

   +------------+-------------------+-------+---------------+----------+
   | JSON Value | Description       | JSON  | Valid Values  | Optional |
   |            |                   | type  |               |          |
   +------------+-------------------+-------+---------------+----------+
   | algorithm  | The algorithm     | value | KAS-ECC       | No       |
   |            | under test        |       |               |          |
   |            |                   |       |               |          |
   | mode       | The algorithm     | value | CDH-Component | No       |
   |            | mode under test   |       |               |          |
   |            |                   |       |               |          |
   | revision   | The algorithm     | value | "1.0"         | No       |
   |            | testing revision  |       |               |          |
   |            | to use.           |       |               |          |
   |            |                   |       |               |          |
   | testGroups | Array of          | Array | Array of test | No       |
   |            | individual test   |       | group         |          |
   |            | group JSON        |       | information   |          |
   |            | objects, which    |       |               |          |
   |            | are defined in    |       |               |          |
   |            | Section 7.2.1     |       |               |          |
   |            |                   |       |               |          |
   +------------+-------------------+-------+---------------+----------+

          Table 21: KAS ECC CDH Component TestVectors JSON Values

7.2.1.  ECC CDH Component TestGroup JSON Values









Fussell & Hammett          Expires May 5, 2019                 [Page 47]

Internet-Draft                Sym Alg JSON                 November 2018


   +----------+------------------+-------+------------------+----------+
   | JSON     | Description      | JSON  | Valid Values     | Optional |
   | Value    |                  | type  |                  |          |
   +----------+------------------+-------+------------------+----------+
   | testType | The test type    | value | AFT              | No       |
   |          | expected within  |       |                  |          |
   |          | the group. AFT   |       |                  |          |
   |          | is the only      |       |                  |          |
   |          | valid value for  |       |                  |          |
   |          | ECC Component.   |       |                  |          |
   |          |                  |       |                  |          |
   | curve    | The curve used   | value | P-224, P-256,    | No       |
   |          | in the test      |       | P-384, P-521,    |          |
   |          | group            |       | K-233, K-283,    |          |
   |          |                  |       | K-409, K-571,    |          |
   |          |                  |       | B-233, B-283,    |          |
   |          |                  |       | B-409, B-571     |          |
   |          |                  |       |                  |          |
   | tests    | Array of         | array | No               |          |
   |          | individual test  |       |                  |          |
   |          | vector JSON      |       |                  |          |
   |          | objects, which   |       |                  |          |
   |          | are defined in   |       |                  |          |
   |          | Section 7.2.2    |       |                  |          |
   |          |                  |       |                  |
   +----------+------------------+-------+------------------+----------+

           Table 22: KAS ECC CDH Component TestGroup JSON Values

7.2.2.  ECC CDH Component TestCase JSON Values





















Fussell & Hammett          Expires May 5, 2019                 [Page 48]

Internet-Draft                Sym Alg JSON                 November 2018


   +---------------+-------------------------------+--------+----------+
   | JSON Value    | Description                   | Valid  | Optional |
   |               |                               | Values |          |
   +---------------+-------------------------------+--------+----------+
   | tcId          | Numeric identifier for the    | value  | No       |
   |               | test case, unique across the  |        |          |
   |               | entire vector set.            |        |          |
   |               |                               |        |          |
   | publicServerX | The X coordinate of the       | value  | Yes      |
   |               | server's public key           |        |          |
   |               |                               |        |          |
   | publicServerY | The Y coordinate of the       | value  | Yes      |
   |               | server's public key           |        |          |
   |               |                               |        |          |
   | publicIutX    | The X coordinate of the iut's | value  | No       |
   |               | public key                    |        |          |
   |               |                               |        |          |
   | publicIutY    | The Y coordinate of the iut's | value  | No       |
   |               | public key                    |        |          |
   |               |                               |        |          |
   | z             | The shared secret Z           | value  | No       |
   |               |                               |        |          |
   +---------------+-------------------------------+--------+----------+

           Table 23: KAS ECC CDH Component TestCase JSON Values

7.2.3.  Example KAS ECC CDH-Component Test Vectors JSON Object

   The following is a example JSON object for KAS ECC CDH-Component test
   vectors sent from the ACVP server to the crypto module.





















Fussell & Hammett          Expires May 5, 2019                 [Page 49]

Internet-Draft                Sym Alg JSON                 November 2018


[{
                "acvVersion": <acvp-version>
        },
        {
                "vsId": 1750,
                "algorithm": "KAS-ECC",
                "mode": "CDH-Component",
                "revision": "1.0",
                "testGroups": [{
                                "tgId": 1,
                                "testType": "AFT",
                                "curve": "p-192",
                                "tests": [{
                                        "tcId": 1,
                                        "publicServerX": "CAEF2CBA796BB7FC143D3EAED698C26AAE6F6F79DF3974EE",
                                        "publicServerY": "03ED6D7A90637629DBCEBFF4A2D1D771D9D4CF9F0D88CE90"
                                }]
                        },
                        {
                                "tgId": 2,
                                "testType": "AFT",
                                "curve": "k-163",
                                "tests": [{
                                        "tcId": 26,
                                        "publicServerX": "048C46D674E1218D0BD3C9FCD120ECE8B4DB7310E7",
                                        "publicServerY": "ED3EEDB656E035C779081090BE44B743E857E3B4"
                                }]
                        },
                        {
                                "tgId": 3,
                                "testType": "AFT",
                                "curve": "b-163",
                                "tests": [{
                                        "tcId": 51,
                                        "publicServerX": "8EE7C8F08BF47B21CA2FE911B721651B90E52391",
                                        "publicServerY": "0461DF3646E95598EAE4F5C6A634E71006ABC6FE1F"
                                }]
                        }
                ]
        }
]


7.3.  KAS CDH-Component Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following




Fussell & Hammett          Expires May 5, 2019                 [Page 50]

Internet-Draft                Sym Alg JSON                 November 2018


   table describes the JSON object that represents a vector set
   response.

   +------------+---------------------------------------------+--------+
   | JSON Value | Description                                 | JSON   |
   |            |                                             | type   |
   +------------+---------------------------------------------+--------+
   | acvVersion | Protocol version identifier                 | value  |
   |            |                                             |        |
   | vsId       | Unique numeric identifier for the vector    | value  |
   |            | set                                         |        |
   |            |                                             |        |
   | testGroups | Array of JSON objects that represent each   | array  |
   |            | test vector group. See Table 25             |        |
   +------------+---------------------------------------------+--------+

          Table 24: CDH Component Vector Set Response JSON Object

   The testGroups section is used to organize the ACVP client response
   in a similar manner to how it receives vectors.  Several algorithms
   SHALL require the client to send back group level properties in their
   response.  This structure helps accommodate that.

   +-----------+--------------------------------------------+----------+
   | JSON      | Description                                | JSON     |
   | Value     |                                            | type     |
   +-----------+--------------------------------------------+----------+
   | tgId      | The test group Id                          | value    |
   |           |                                            |          |
   | tests     | The tests associated to the group          | value    |
   |           | specified in tgId                          |          |
   |           |                                            |          |
   +-----------+--------------------------------------------+----------+

       Table 25: CDH Component Vector Set Group Response JSON Object

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each DRBG test vector.











Fussell & Hammett          Expires May 5, 2019                 [Page 51]

Internet-Draft                Sym Alg JSON                 November 2018


   +------------+-----------------------------------+-------+----------+
   | JSON Value | Description                       | JSON  | Optional |
   |            |                                   | type  |          |
   +------------+-----------------------------------+-------+----------+
   | tcId       | Numeric identifier for the test   | value | No       |
   |            | case, unique across the entire    |       |          |
   |            | vector set.                       |       |          |
   |            |                                   |       |          |
   | publicIutX | x value of the IUT public key     | value | No       |
   |            |                                   |       |          |
   | publicIutY | x value of the IUT public key     | value | No       |
   |            |                                   |       |          |
   | z          | Computed shared secret Z          | value | No       |
   |            |                                   |       |          |
   +------------+-----------------------------------+-------+----------+

           Table 26: CDH Component Test Case Results JSON Object

7.4.  Example KAS ECC CDH Component Test Results JSON Object

   The following is a example JSON object for KAS ECC CDH Component test
   results sent from the crypto module to the ACVP server.





























Fussell & Hammett          Expires May 5, 2019                 [Page 52]

Internet-Draft                Sym Alg JSON                 November 2018


[{
                "acvVersion": <acvp-version>
        },
        {
                "vsId": 1750,
                "testGroups": [{
                                "tgId": 1,
                                "tests": [{
                                        "tcId": 1,
                                        "publicIutX": "DB9FBC84CBAD3EED42C31CDBF2882041634D040219C3E47A",
                                        "publicIutY": "9BD672733BCCEF2BD805E97FF9BBFE0FFC003BEEEF56868B",
                                        "z": "8BEAEA60DFAC075F9F25A5CFEA39818D98D3EA4B9D4C34A8"
                                }]
                        },
                        {
                                "tgId": 2,
                                "tests": [{
                                        "tcId": 26,
                                        "publicIutX": "058C593D1D4E8238102BDE6B497218D92F8EDD2997",
                                        "publicIutY": "0437682E4608984EFC7FB619FB260EF27CAF704D7B",
                                        "z": "075D9A831E0665521D613AEAA59B8C8CDFBAC8C683"
                                }]
                        },
                        {
                                "tgId": 3,
                                "tests": [{
                                        "tcId": 51,
                                        "publicIutX": "04128CD094F6988AA26DA2B100A71A31214CC9C50B",
                                        "publicIutY": "01A3A88C9F0987E488922573D0A31D300532F0B268",
                                        "z": "07EC896621BF1703EB7567196ED1DE5742C4695990"
                                }]
                        }
                ]
        }
]


8.  Acknowledgements

   TBD...

9.  IANA Considerations

   This memo includes no request to IANA.







Fussell & Hammett          Expires May 5, 2019                 [Page 53]

Internet-Draft                Sym Alg JSON                 November 2018


10.  Security Considerations

   Security considerations are addressed by the ACVP specification.

11.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [SP800-56a]
              NIST, "Recommendation for Pair-Wise Key-Establishment
              Schemes Using Discrete Logarithm Cryptography", April
              2018,
              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
              NIST.SP.800-56Ar3.pdf>.

Authors' Addresses

   Barry Fussell (editor)
   Cisco Systems, Inc.
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: bfussell@cisco.com


   Russell Hammett (editor)
   G2, Inc.
   302 Sentinel Dr Suite 300
   Annapolis Junction , MD  20701
   USA

   Email: russ.hammett@g2-inc.com













Fussell & Hammett          Expires May 5, 2019                 [Page 54]
