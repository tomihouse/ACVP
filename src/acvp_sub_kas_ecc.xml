<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subkasecc-1.0" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
        <title abbrev="Sym Alg JSON">ACVP KAS ECC JSON Specification</title>
        <!-- add 'role="editor"' below for the editors if appropriate -->
        <!-- Another author who claims to be an editor -->
        <author fullname="Barry Fussell" initials="B.F." role="editor" surname="Fussell">
            <organization>Cisco Systems, Inc.</organization>
            <address>
                <postal>
                    <street>170 West Tasman Dr.</street>
                    <!-- Reorder these if your country does things differently -->
                    <city>San Jose</city>
                    <region>CA</region>
                    <code>95134</code>
                    <country>USA</country>
                </postal>
                <email>bfussell@cisco.com</email>
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <author fullname="Russell Hammett" initials="R.H." role="editor" surname="Hammett">
            <organization>G2, Inc.</organization>
            <address>
                <postal>
                    <street>302 Sentinel Dr Suite 300</street>
                    <!-- Reorder these if your country does things differently -->
                    <city>Annapolis Junction </city>
                    <region>MD</region>
                    <code>20701</code>
                    <country>USA</country>
                </postal>
                <email>russ.hammett@g2-inc.com</email>
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <date month="November" year="2018"/>
        <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->
        <!-- Meta-data Declarations -->
        <area>General</area>
        <workgroup>TBD</workgroup>
        <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
        <keyword>acvp</keyword>
        <keyword>crypto</keyword>
        <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
        <abstract>
            <t>This document defines the JSON schema for using KAS ECC algorithms with the ACVP
                specification.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically
                verify the cryptographic implementation of a software or hardware crypto module. The
                ACVP specification defines how a crypto module communicates with an ACVP server,
                including crypto capabilities negotiation, session management, authentication,
                vector processing and more. The ACVP specification does not define algorithm
                specific JSON constructs for performing the crypto validation. A series of ACVP
                sub-specifications define the constructs for testing individual crypto algorithms.
                Each sub-specification addresses a specific class of crypto algorithms. This
                sub-specification defines the JSON constructs for testing KAS ECC algorithms using
                ACVP.</t>
            <section title="Requirements Language">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                    "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
                    interpreted in <xref target="RFC2119">RFC 2119</xref>. </t>
            </section>
        </section>
        <section anchor="test_types" title="Test Types and Test Coverage">
            <t>The ACVP server performs a set of tests on the KAS protocol in order to assess the
                correctness and robustness of the implementation. A typical ACVP validation session
                SHALL require multiple tests to be performed for every supported permutation of KAS
                capabilities. This section describes the design of the tests used to validate
                implementations of KAS algorithms. There are two test types for KAS testing: <list
                    style="testtype">
                    <t>"AFT" - Algorithm Function Test. In the AFT test mode, the IUT SHALL 
                        act as a party in the Key Agreement with the ACVP server. The server SHALL
                        generate and provide all necessary information for the IUT to perform a
                        successful key agreement; both the server and IUT MAY act as party U/V, as
                        well as recipient/provider to key confirmation.</t>
                    <t>"VAL" - Validation test. In the VAL test mode, The ACVP server MUST generate a
                        complete (from both party U and party V's perspectives) key agreement, and
                        expects the IUT to be able to determine if that agreement is valid. Various
                        types of errors MSUT be introduced in varying portions of the key agreement
                        process (changed DKM, changed key, changed hash digest, etc), that the IUT 
                        MUST be able to detect and report on.</t>
                </list>
            </t>
            <section anchor="test_coverage" title="Test Coverage">
                <t>The tests described in this document have the intention of ensuring an
                    implementation is conformant to <xref target="SP800-56a"/>. </t>
                <section anchor="requirements_covered_kas_ecc" title="KAS-ECC Requirements Covered">
                    <t>
                        <list>
                            <t>SP 800-56a - 4.1 Key Establishment Preparations. The ACVP server is
                                responsible for generating domain parameters as per the IUT's
                                capability registration.</t>
                            <t>SP 800-56a - 4.2 Key-Agreement Process. Both the ACVP server and IUT
                                participate in the Key Agreement process. The server and IUT can
                                both take the roles of party U/V, and as such the "performer" of
                                steps depicted in "Figure 2: Key Agreement process" can vary.</t>
                            <t>SP 800-56a - 5.1 Cryptographic Hash Functions. All modes of
                                performing KAS SHALL make use of a hash function. The hash function MAY
                                be used for confirmation of a successfully generated shared secret Z
                                (noKdfNoKc), or as a primitive within the KDF being tested (kdfNoKc
                                and kdfKc).</t>
                            <t>SP 800-56a - 5.2 Message Authentication Code (MAC) Algorithm. A MAC
                                is utilized for confirmation of success for kdfNoKc and kdfKc modes
                                of KAS. Note - a MAC prerequisite is REQUIRED only for kdfKc, though
                                is utilized for both kdfNoKc and kdfKc.</t>
                            <t>SP 800-56a - 5.4 Nonce. Nonces are made use of in various KAS schemes
                                - both the ACVP server and IUT SHALL be expected to generate
                                nonces.</t>
                            <t>SP 800-56a - 5.6 Domain Parameters. Domain Parameter Generation SHALL be 
                                performed solely from the ACVP server, with constraints from the
                                IUTs capabilities registration. The same set of domain parameters SHALL
                                generate all keypairs (party U/V, static/ephemeral) for a single test case.</t>
                            <t>SP 800-56a - 5.6 Key-Pair Generation. While Key-Pairs are used in
                                each KAS scheme, the generation of said key-pairs is out of scope
                                for KAS testing. Random tests from the VAL groups, MAY inject bad
                                keypairs that the IUT MUST be able detect. These random tests are
                                only present in groups given appropriate assurance functions see:
                                    <xref target="supported_functions"/>
                            </t>
                            <t>SP 800-56a - 4.3 DLC-based Key-Transport Process / 5.7 DLC
                                Primitives. Depending on the scheme used, either Diffie Hellman or
                                MQV SHALL be used to negotiate a shared secret of z. Testing and
                                validation of such key exchanges is covered under their respective
                                schemes.</t>
                            <t>SP 800-56a - 5.8 Key-Derivation Methods for Key-Agreement Schemes.
                                All schemes/modes save noKdfNoKc (component) MUST make use of a KDF. KDF
                                construction SHALL utilize <xref target="oiPatternConstruction"/> for its
                                pattern. </t>
                            <t>SP 800-56a - 5.9 Key Confirmation. Most KAS schemes allow for a Key
                                Confirmation process, the ACVP server and IUT MAY be Providers or
                                Recipients of said confirmation. Additionally, key confirmation MAY
                                be performed on one or both parties (depending on scheme).</t>
                            <t>SP 800-56a - 6 Key Agreement Schemes. All schemes specified in
                                referenced document are supported for validation with the ACVP
                                server.</t>
                        </list>
                    </t>
                </section>
                <section anchor="requirements_not_covered_kas_ecc"
                    title="KAS-ECC Requirements Not Covered">
                    <t>
                        <list>
                            <t>SP 800-56a - 4.1 Key Establishment Preparations. The ACVP server SHALL
                                NOT make a distinction between IUT generated keys via a trusted
                                third party and the IUT itself.</t>
                            <t>SP 800-56a - 5.3 Random Number Generation. The IUT MUST
                                perform all random number generation with a validated random number
                                generator. A DRBG is REQUIRED as a prerequisite to KAS, but SHALL NOT
                                be in the scope testing assurances. </t>
                            <t>SP 800-56a - 5.4 Nonce. Nonce generation is utilized for several
                                schemes. The various methods of generating a nonce described in
                                section 5.5 MUST be used, however their generation SHALL NOT 
                                be in scope of KAS testing assurances</t>
                            <t>SP 800-56a - 5.5.2 Assurances of Domain-Parameter Validity. The ACVP
                                server SHALL generate all domain parameters, IUT validation of such
                                parameters is SHALL NOT be in scope for KAS testing.</t>
                            <t>SP 800-56a - 5.5.3 Domain Parameter Management. Domain Parameter
                                Management SHALL NOT be in scope for KAS testing.</t>
                            <t>SP 800-56a - 5.6 Key-Pair Generation. While Key-Pairs MUST be used in
                                each KAS scheme, the generation, assurances, and management of said
                                key-pairs SHALL NOT be in scope of KAS testing.</t>
                            <t>SP 800-56a - 5.8 Key-Derivation Methods for Key-Agreement Schemes.
                                Two-step Key-Derivation (Extraction-then-Expansion) SHALL NOT be utilized
                                in KAS testing.</t>
                            <t>SP 800-56a - 5.9 Key Confirmation. KMAC is referenced in 800-56a as
                                being a valid MAC function; it however SHALL NOT (currently) be supported
                                in KAS testing.</t>
                            <t>SP 800-56a - 5.7 Rationale for Selecting a Specific Scheme. It is
                                expected that the IUT registers all schemes it supports in its
                                capabilities registration. Selecting specific schemes from a KAS
                                testing perspective SHALL NOT be in scope.</t>
                            <t>SP 800-56a - 8 Key Recovery. Key Recovery SHALL NOT be in scope of KAS
                                testing.</t>
                        </list>
                    </t>
                </section>
            </section>
        </section>
        <section anchor="caps_reg" title="Capabilities Registration">
            <t>ACVP REQUIRES crypto modules to register their capabilities. This allows the crypto
                module to advertise support for specific algorithms, notifying the ACVP server which
                algorithms need test vectors generated for the validation process. This section
                describes the constructs for advertising support of KAS ECC algorithms to the ACVP
                server.</t>
            <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms'
                value of the ACVP registration message. The 'algorithms' value is an array, where
                each array element is an individual JSON object defined in this section. The
                'algorithms' value is part of the 'capability_exchange' element of the ACVP JSON
                registration message. See the ACVP specification for details on the registration
                message. Each KDF algorithm capability advertised is a self-contained JSON
                object.</t>
            <section anchor="prereq_algs"
                title="Required Prerequisite Algorithms for KAS ECC Validations">
                <t>Some algorithm implementations rely on other cryptographic primitives. For
                    example, IKEv2 uses an underlying SHA algorithm. Each of these underlying
                    algorithm primitives must be validated, either separately or as part of the same
                    submission. ACVP provides a mechanism for specifying the required
                    prerequisites:</t>
                <texttable anchor="rereqs_table"
                    title="Required Prerequisite Algorithms JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>a prerequisite algorithm</c>
                    <c>value</c>
                    <c>CCM, CMAC, DRBG, ECDSA, HMAC, SHA</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>valValue</c>
                    <c>algorithm validation number</c>
                    <c>value</c>
                    <c>actual number or "same"</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>prereqAlgVal</c>
                    <c>prerequistie algorithm validation</c>
                    <c>object with algorithm and valValue properties</c>
                    <c>see above</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
                <t>KAS has conditional prerequisite algorithms, depending on the capabilities
                    registered:</t>
                <texttable anchor="prereqs_requirements_table"
                    title="Prerequisite requirement conditions">
                    <ttcol align="left">Prerequisite Algorithm</ttcol>
                    <ttcol align="left">Condition</ttcol>
                    <c>DRBG</c>
                    <c>Always REQUIRED</c>
                    <c/>
                    <c/>
                    <c>SHA</c>
                    <c>Always REQUIRED</c>
                    <c/>
                    <c/>
                    <c>ECDSA</c>
                    <c> ECDSA.PKV validation REQUIRED when IUT using assurance functions of
                        "fullVal", "keyPairGen", or "keyRegen". ECDSA.KeyPair validation REQUIRED
                        when IUT using assurances functions of "keyPairGen", or "keyRegen". </c>
                    <c/>
                    <c/>
                    <c>AES-CCM</c>
                    <c>AES-CCM validation REQUIRED when IUT is performing KeyConfirmation (KC) and
                        utilizing AES-CCM.</c>
                    <c/>
                    <c/>
                    <c>CMAC</c>
                    <c>CMAC validation REQUIRED when IUT is performing KeyConfirmation (KC) and
                        utilizing CMAC.</c>
                    <c/>
                    <c/>
                    <c>HMAC</c>
                    <c>HMAC validation REQUIRED when IUT is performing KeyConfirmation (KC) and
                        utilizing HMAC.</c>
                    <c/>
                    <c/>
                </texttable>
            </section>
            <section anchor="cap_ex" title="KAS ECC Algorithm Capabilities JSON Values">
                <t>Each algorithm capability advertised is a self-contained JSON object using the
                    following values.</t>
                <texttable anchor="caps_table" title="KAS ECC Capabilities JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>The algorithm under test</c>
                    <c>value</c>
                    <c>KAS-ECC</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>mode</c>
                    <c>The algorithm mode.</c>
                    <c>value</c>
                    <c>Component</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>revision</c>
                    <c>The algorithm testing revision to use.</c>
                    <c>value</c>
                    <c>"1.0"</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>prereqVals</c>
                    <c>Prerequisite algorithm validations</c>
                    <c>array of prereqAlgVal objects</c>
                    <c>See <xref target="prereq_algs"/>
                    </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>function</c>
                    <c>Type of function supported</c>
                    <c>array</c>
                    <c>See <xref target="supported_functions"/>
                    </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>scheme</c>
                    <c>Array of supported key agreement schemes each having their own
                        capabilities</c>
                    <c>object</c>
                    <c>See <xref target="supported_schemes"/>
                    </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
                <t>Note: Some optional values are required depending on the algorithm. Failure to
                    provide these values will result in the ACVP server returning an error to the
                    ACVP client during registration.</t>
            </section>
            <section anchor="supported_functions" title="Supported KAS ECC Functions">
                <t>The following function types MAY be advertised by the ACVP compliant crypto
                    module:</t>
                <t>
                    <list style="symbols">
                        <t>dpGen - IUT can perform domain parameter generation (FFC only)</t>
                        <t>dpVal - IUT can perform domain parameter validation (FFC only)</t>
                        <t>keyPairGen - IUT can perform keypair generation.</t>
                        <t>fullVal - IUT can perform full public key validation ( <xref
                                target="SP800-56a"/> section 5.6.2.3.1 / 5.6.2.3.3) </t>
                        <t>partialVal - IUT can perform partial public key validation ( <xref
                                target="SP800-56a"/> section 5.6.2.3.2 / 5.6.2.3.4) </t>
                        <t>keyRegen - IUT can regenerate keys given a specific seed and domain
                            parameter (pqg for FFC, curve for ECC)</t>
                    </list>
                </t>
            </section>
            <section anchor="schemes" title="KAS ECC Schemes">
                <section anchor="supported_schemes" title="KAS ECC Scheme Capabilities JSON Values">
                    <t> All other scheme capabilities are advertised as a self-contained JSON object using
                        the following values. Note that at least one of "noKdfNoKc", "kdfNoKc", or
                        "kdfKc" MUST be supplied with the registration. See <xref
                            target="supported_scheme_values"/> for allowed ECC scheme types. </t>
                    <texttable anchor="scheme_caps_table" title="KAS ECC Capabilities JSON Values">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>kasRole</c>
                        <c>Roles supported for key agreement</c>
                        <c>array</c>
                        <c>initiator and/or responder</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>noKdfNoKc</c>
                        <c>Indicates no KDF, no KC tests are to be generated. Note this is a
                            COMPONENT mode only test. This property MUST only be used with "KAS-ECC"
                            / "Component"</c>
                        <c>object</c>
                        <c>
                            <xref target="noKdfNoKc"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>kdfNoKc</c>
                        <c>Indicates KDF, no KC tests are to be generated. Note this is a KAS-ECC
                            only test. This mode MAY only be used for registrations with "KAS-ECC" (no
                            mode)</c>
                        <c>object</c>
                        <c>
                            <xref target="kdfNoKc"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>kdfKc</c>
                        <c>Indicates KDF, KC tests are to be generated. Note this is a KAS-ECC only
                            test. This mode MAY only be used for registrations with "KAS-ECC" (no
                            mode)</c>
                        <c>object</c>
                        <c>
                            <xref target="kdfKc"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
                <section anchor="supported_scheme_values" title="Supported KAS ECC Schemes">
                    <t>The following schemes MAY be advertised by the ACVP compliant crypto
                        module:</t>
                    <t>
                        <list style="symbols">
                            <t>ephemeralUnified - keyConfirmation not supported</t>
                            <t>fullMqv</t>
                            <t>fullUnified</t>
                            <t>onePassDh - Can only provide unilateral key confirmation party V to
                                party U.</t>
                            <t>onePassMqv</t>
                            <t>onePassUnified</t>
                            <t>staticUnified</t>
                        </list>
                    </t>
                </section>
            </section>
            <section anchor="kasMode" title="KAS ECC Modes">
                <section anchor="noKdfNoKc" title="KAS ECC noKdfNoKc">
                    <t>Contains properties REQUIRED for "noKdfNoKc" registration. </t>
                    <texttable anchor="noKdfNoKc_table" title="NoKdfNoKc Capabilities">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>parameterSet</c>
                        <c>The parameterSet options for "noKdfNoKc"</c>
                        <c>object</c>
                        <c>
                            <xref target="parameter_set"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
                <section anchor="kdfNoKc" title="KAS ECC kdfNoKc">
                    <t>Contains properties REQUIRED for "kdfNoKc" registration. </t>
                    <texttable anchor="kdfNoKc_table" title="kdfNoKc Capabilities">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>kdfOption</c>
                        <c>The kdf options for "kdfNoKc"</c>
                        <c>object</c>
                        <c>
                            <xref target="supported_kdfOption"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>parameterSet</c>
                        <c>The parameterSet options for "kdfNoKc"</c>
                        <c>object</c>
                        <c>
                            <xref target="parameter_set"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
                <section anchor="kdfKc" title="KAS ECC kdfKc">
                    <t>Contains properties REQUIRED for "kdfKc" registration. </t>
                    <texttable anchor="kdfKc_table" title="kdfKc Capabilities">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>kdfOption</c>
                        <c>The kdf options for "kdfNoKc"</c>
                        <c>object</c>
                        <c>
                            <xref target="supported_kdfOption"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>kcOption</c>
                        <c>The kc options for "kdfNoKc"</c>
                        <c>object</c>
                        <c>
                            <xref target="supported_kcOption"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>parameterSet</c>
                        <c>The parameterSet options for "kdfNoKc"</c>
                        <c>object</c>
                        <c>
                            <xref target="parameter_set"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
            </section>
            <section anchor="parameterSet" title="Parameter Sets">
                <section anchor="parameter_set" title="KAS ECC Parameter Set">
                    <t>Each parameter set advertised is a self-contained JSON object using the
                        following values. Note that at least one parameter set ("eb", "ec", "ed",
                        "ee") is REQUIRED.</t>
                    <texttable anchor="parameter_set_table"
                        title="KAS ECC Parameter Set Capabilities JSON Values">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>eb</c>
                        <c>The eb parameter set</c>
                        <c>object</c>
                        <c>See <xref target="parameter_set_details"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>ec</c>
                        <c>The ec parameter set</c>
                        <c>object</c>
                        <c>See <xref target="parameter_set_details"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>ed</c>
                        <c>The ed parameter set</c>
                        <c>object</c>
                        <c>See <xref target="parameter_set_details"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>ee</c>
                        <c>The ee parameter set</c>
                        <c>object</c>
                        <c>See <xref target="parameter_set_details"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
                <section anchor="parameter_set_details" title="KAS ECC Parameter Set Details">
                    <t>eb: Len n - 224-255, min Len h - 112, min hash len - 224, min keySize - 112,
                        min macSize - 64</t>
                    <t>ec: Len n - 256-283, min Len h - 128, min hash len - 256, min keySize - 128,
                        min macSize - 64</t>
                    <t>ed: Len n - 384-511, min Len h - 192, min hash len - 384, min keySize - 192,
                        min macSize - 64</t>
                    <t>ee: Len n - 512+, min Len h - 256, min hash len - 512, min keySize - 256, min
                        macSize - 64</t>
                    <t>"noKdfNoKc" REQUIRES "hashAlg"</t>
                    <t>"kdfNoKc" REQUIRES "hashAlg" and at least one valid MAC registration</t>
                    <t>"kdfKc" REQUIRES "hashAlg" and at least one valid MAC registration</t>
                    <texttable anchor="parameter_set_details_table"
                        title="KAS ECC Parameter Set Details Capabilities JSON Values">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>curve</c>
                        <c>The elliptic curve to use for key generation.</c>
                        <c>value</c>
                        <c>See <xref target="supported_curves"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>hashAlg</c>
                        <c>The hash algorithms to use for KDF (and noKdfNoKc)</c>
                        <c>array</c>
                        <c>See <xref target="supported_hashAlg"/>
                        </c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>macOption</c>
                        <c>The macOption(s) to use with "kdfNoKc" and/or "kdfKc"</c>
                        <c>object</c>
                        <c>See <xref target="supported_macOption"/>
                        </c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
            </section>
            <section anchor="supported_curves" title="Supported ECC Curves">
                <t>The following ECC Curves MAY be advertised by the ACVP compliant crypto
                    module:</t>
                <texttable anchor="curves" title="Supported Curves per parameter set.">
                    <ttcol align="left">Parameter Set</ttcol>
                    <ttcol align="left">Prime</ttcol>
                    <ttcol align="left">Koblitz</ttcol>
                    <ttcol align="left">Binary</ttcol>
                    <c>eb</c>
                    <c>P-224</c>
                    <c>K-233</c>
                    <c>B-233</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ec</c>
                    <c>P-256</c>
                    <c>K-283</c>
                    <c>B-283</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ed</c>
                    <c>P-384</c>
                    <c>K-409</c>
                    <c>B-409</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ee</c>
                    <c>P-521</c>
                    <c>K-571</c>
                    <c>B-571</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
            </section>
            <section anchor="supported_hashAlg" title="Supported Hash Algorithm Methods">
                <t>The following SHA methods MAY be advertised by the ACVP compliant crypto
                    module:</t>
                <t>
                    <list style="symbols">
                        <t>SHA2-224</t>
                        <t>SHA2-256</t>
                        <t>SHA2-384</t>
                        <t>SHA2-512</t>
                    </list>
                </t>
            </section>
            <section anchor="supported_macOption" title="Supported KAS ECC MAC Options">
                <t>The following MAC options MAY be advertised for registration under a "kdfNoKc" and
                    "kdfKc" kasMode:</t>
                <t>
                    <list style="symbols">
                        <t>AES-CCM</t>
                        <t>CMAC</t>
                        <t>HMAC-SHA2-224</t>
                        <t>HMAC-SHA2-256</t>
                        <t>HMAC-SHA2-384</t>
                        <t>HMAC-SHA2-512</t>
                    </list>
                </t>
                <texttable anchor="macOption_details_table" title="KAS ECC Mac Option Details">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>keyLen</c>
                    <c>The supported keyLens for the selected MAC.</c>
                    <c>Domain</c>
                    <c> AES based MACs limited to 128, 192, 256. HashAlg based MACs mod 8. All
                        keySizes minimum MUST conform to parameter set requirements See <xref
                            target="parameter_set_details"/> . </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceLen</c>
                    <c>The nonce len for use with AES-CCM mac</c>
                    <c>value</c>
                    <c>Input as bits, 56-104, odd byte values only (7-13). Additionally minimum MUST
                        conform to parameter set requirements See <xref
                            target="parameter_set_details"/> . </c>
                    <c>Yes (required for AES-CCM)</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>macLen</c>
                    <c>The mac len for use with mac</c>
                    <c>value</c>
                    <c>Input as bits, mod 8, minimum MUST conform to parameter set requirements See
                            <xref target="parameter_set_details"/> , maximum SHALL NOT exceed block
                        size.. </c>
                    <c>Yes (required for AES-CCM)</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
            </section>
            <section anchor="supported_kdfOption" title="Supported KAS ECC KDF Options">
                <t>The following MAC options are available for registration under a "kdfNoKc" and
                    "kdfKc" kasMode:</t>
                <t>
                    <list style="symbols">
                        <t>concatenation</t>
                        <t>asn1</t>
                    </list>
                </t>
                <texttable anchor="kdfOption_details_table" title="KAS ECC KDF Option Details">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>oiPattern</c>
                    <c>The OI pattern to use for constructing OtherInformation.</c>
                    <c>value</c>
                    <c>See <xref target="oiPatternConstruction"/> . </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
                <section anchor="oiPatternConstruction" title="Other Information Construction">
                    <t> Some IUTs MAY require a specific pattern for the OtherInfo portion of the KDFs
                        for KAS. An "oiPattern" is specified in the KDF registration to accommodate
                        such requirements. Regardless of the oiPattern specified, the OI bitlength
                        MUST be 240 for FFC, and 376 for ECC. The OI SHALL be padded with random bits
                        (or the most significant bits utilized) when the specified OI pattern does
                        not meet the bitlength requirement </t>
                    <t>Pattern candidates:</t>
                    <t>
                        <list style="symbols">
                            <t>literal[123456789ABCDEF] <list style="symbols">
                                    <t>uses the specified hex within "[]". literal[123456789ABCDEF]
                                        substitutes "123456789ABCDEF" in place of the field</t>
                                </list>
                            </t>
                            <t>uPartyInfo <list style="symbols">
                                    <t>uPartyId { || dkmNonce } <list style="symbols">
                                            <t>dkmNonce is provided by party u for static
                                                schemes</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                            <t>vPartyInfo <list style="symbols">
                                    <t>vPartyId</t>
                                </list>
                            </t>
                            <t>counter <list style="symbols">
                                    <t>32bit counter starting at "1" (0x00000001)</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example (Note that party U is the server in this case "434156536964", party V
                        is the IUT "a1b2c3d4e5", using an ECC non-static scheme):</t>
                    <t>
                        <list style="symbols">
                            <t>"concatenation" :
                                "literal[123456789CAFECAFE]||uPartyInfo||vPartyInfo"</t>
                        </list>
                    </t>
                    <t>Evaluated as:</t>
                    <t>
                        <list style="symbols">
                            <t>"123456789CAFECAFE434156536964a1b2c3d4e5b16c5f78ef56e8c14a561"</t>
                            <t>"b16c5f78ef56e8c14a561" are random bits applied to meet length
                                requirements</t>
                        </list>
                    </t>
                </section>
            </section>
            <section anchor="supported_kcOption" title="Supported KAS ECC KC Options">
                <t>The following KC options are available for registration under a "kdfKc"
                    kasMode:</t>
                <texttable anchor="kcOption_details_table"
                    title="KAS ECC KC Option Details Capabilities">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>kcRole</c>
                    <c>The role(s) the IUT is to act as for KeyConfirmation.</c>
                    <c>array</c>
                    <c>provider/recipient</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>kcType</c>
                    <c>The type(s) the IUT is to act as for KeyConfirmation.</c>
                    <c>array</c>
                    <c>unilateral/bilateral</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceType</c>
                    <c>The nonce type(s) the IUT is to use for KeyConfirmation.</c>
                    <c>array</c>
                    <c>randomNonce, timestamp, sequence, timestampSequence</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
            </section>
            <section anchor="app-reg-ex" title="Example KAS ECC Capabilities JSON Object">
                <t>The following is a example JSON object advertising support for KAS ECC.</t>
                <figure>
                    <artwork>
                        <![CDATA[

{
	"algorithm": "KAS-ECC",
	"revision": "1.0",
	"prereqVals": [{
			"algorithm": "ECDSA",
			"valValue": "123456"
		},
		{
			"algorithm": "DRBG",
			"valValue": "123456"
		},
		{
			"algorithm": "SHA",
			"valValue": "123456"
		},
		{
			"algorithm": "CCM",
			"valValue": "123456"
		},
		{
			"algorithm": "CMAC",
			"valValue": "123456"
		},
		{
			"algorithm": "HMAC",
			"valValue": "123456"
		}
	],
	"function": ["keyPairGen", "dpGen"],
	"scheme": {
		"ephemeralUnified": {
			"kasRole": ["initiator", "responder"],
			"kdfNoKc": {
				"kdfOption": {
					"concatenation": "uPartyInfo||vPartyInfo",
					"ASN1": "uPartyInfo||vPartyInfo"
				},
				"parameterSet": {
					"ec": {
						"curve": "K-283",
						"hashAlg": ["SHA2-224", "SHA2-256"],
						"macOption": {
							"AES-CCM": {
								"keyLen": [128],
								"nonceLen": 56,
								"macLen": 64
							}
						}
					}
				}
			}
		}
	}
}

            ]]>
                    </artwork>
                </figure>
            </section>
            <section anchor="app-reg-component-ex"
                title="Example KAS ECC Component Capabilities JSON Object">
                <t>The following is a example JSON object advertising support for KAS ECC
                    Component.</t>
                <figure>
                    <artwork>
                        <![CDATA[

{
	"algorithm": "KAS-ECC",
	"mode": "Component",
	"revision": "1.0",
	"prereqVals": [{
			"algorithm": "ECDSA",
			"valValue": "123456"
		},
		{
			"algorithm": "DRBG",
			"valValue": "123456"
		},
		{
			"algorithm": "SHA",
			"valValue": "123456"
		},
		{
			"algorithm": "CCM",
			"valValue": "123456"
		},
		{
			"algorithm": "CMAC",
			"valValue": "123456"
		},
		{
			"algorithm": "HMAC",
			"valValue": "123456"
		}
	],
	"function": ["keyPairGen", "dpGen"],
	"scheme": {
		"ephemeralUnified": {
			"kasRole": ["initiator", "responder"],
			"noKdfNoKc": {
				"parameterSet": {
					"eb": {
						"curve": "P-224",
						"hashAlg": ["SHA2-224", "SHA2-256"]
					}
				}
			}
		}
	}
}

            ]]>
                    </artwork>
                </figure>
            </section>
        </section>
        <section anchor="generation_reqs_per_scheme"
            title="Generation requirements per party per scheme">
            <t>The various schemes of KAS all have their own requirements as to keys and nonces per
                scheme, per party. The below table demonstrates those generation requirements:</t>
                <texttable anchor="scheme_generation_requirements"
                title="Required Party Generation Obligations">
                <ttcol align="left">Scheme</ttcol>
                <ttcol align="left">KasMode</ttcol>
                <ttcol align="left">KasRole</ttcol>
                <ttcol align="left">KeyConfirmationRole</ttcol>
                <ttcol align="left">KeyConfirmationDirection</ttcol>
                <ttcol align="left">StaticKeyPair</ttcol>
                <ttcol align="left">EphemeralKeyPair</ttcol>
                <ttcol align="left">EphemeralNonce</ttcol>
                <ttcol align="left">DkmNonce</ttcol>
                <c>DhHybrid1</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybrid1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv2</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhEphem</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhEphem</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhEphem</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhEphem</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhHybridOneFlow</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>Mqv1</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhOneFlow</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhOneFlow</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhOneFlow</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhOneFlow</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhOneFlow</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhOneFlow</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>NoKdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>NoKdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfNoKc</c>
                <c>InitiatorPartyU</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>True</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfNoKc</c>
                <c>ResponderPartyV</c>
                <c>None</c>
                <c>None</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>True</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>True</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>True</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>InitiatorPartyU</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>True</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>False</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Provider</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Unilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c>DhStatic</c>
                <c>KdfKc</c>
                <c>ResponderPartyV</c>
                <c>Recipient</c>
                <c>Bilateral</c>
                <c>True</c>
                <c>False</c>
                <c>True</c>
                <c>False</c>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
                <c/>
            </texttable>
        </section>
        <section anchor="test_vectors" title="Test Vectors">
            <t>The ACVP server provides test vectors to the ACVP client, which are then processed
                and returned to the ACVP server for validation. A typical ACVP validation session
                would require multiple test vector sets to be downloaded and processed by the ACVP
                client. Each test vector set represents an individual KAS ECC function. This section
                describes the JSON schema for a test vector set used with KAS ECC algorithms.</t>
            <t>The test vector set JSON schema is a multi-level hierarchy that contains meta data
                for the entire vector set as well as individual test vectors to be processed by the
                ACVP client.The following table describes the JSON elements at the top level of the
                hierarchy. </t>
            <texttable anchor="vs_top_table" title="Vector Set JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>acvVersion</c>
                <c>Protocol version identifier</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>vsId</c>
                <c>Unique numeric identifier for the vector set</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>algorithm</c>
                <c>KAS-ECC</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>revision</c>
                <c>The algorithm testing revision to use.</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>type</c>
                <c>Type of operation supported</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>testGroups</c>
                <c>Array of test group JSON objects, which are defined in <xref target="tgjs"/>
                </c>
                <c>array</c>
            </texttable>
            <section title="Test Groups JSON Schema" anchor="tgjs">
                <t>The testGroups element at the top level in the test vector JSON object is an
                    array of test groups. Test vectors are grouped into similar test cases to reduce
                    the amount of data transmitted in the vector set. For instance, all test vectors
                    that use the same key size would be grouped together. The Test Group JSON object
                    contains meta data that applies to all test vectors within the group. The
                    following table describes the secure hash JSON elements of the Test Group JSON
                    object.</t>
                <t> The test group for KAS ECC is as follows:</t>
                <texttable anchor="vs_tg_table5" title="Vector Group JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>tgId</c>
                    <c>Numeric identifier for the test group, unique across the entire vector
                        set.</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>scheme</c>
                    <c>The scheme for the test vectors. See <xref target="supported_schemes"/> for
                        possible values </c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>testType</c>
                    <c> The type of testCases expected within the group. AFT (Functional) tests
                        produce test cases where the prompt file delivers only the needed public
                        server information in which the IUT is expected to perform KAS. VAL
                        (Validity) tests produce inputs/outputs from both server and IUT
                        perspectives of a KAS negotiation. The expectation of the IUT on such tests
                        is to determine if the KAS negotiation was successful or not. </c>
                    <c>AFT, VAL</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>kasRole</c>
                    <c>The KAS role</c>
                    <c>initiator, responder</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>kasMode</c>
                    <c>The KAS mode</c>
                    <c>noKdfNoKc, kdfNoKc, kdfKc</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>parmSet</c>
                    <c>Parameter set value to use</c>
                    <c>eb, ec, ed, ee</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>hashAlg</c>
                    <c>hashAlg values being used</c>
                    <c>See <xref target="supported_hashAlg"/>
                    </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>macType</c>
                    <c>The MAC being used. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>See <xref target="supported_macOption"/>
                    </c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>keyLen</c>
                    <c>The key length of the MAC. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>See <xref target="supported_macOption"/>
                    </c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceAesCcmLen</c>
                    <c>The nonce length of the MAC (applies only to AES-CCM). REQUIRED for "kdfNoKc"
                        and "kdfKc" modes using a AES-CCM MAC.</c>
                    <c>See <xref target="supported_macOption"/>
                    </c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>macLen</c>
                    <c>The mac length. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>See <xref target="supported_macOption"/>
                    </c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>kdfType</c>
                    <c>The KDF being used. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>concatenation, asn1</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>idServerLen</c>
                    <c>The length of the server ID. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>idServer</c>
                    <c>The server ID. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>idIutLen</c>
                    <c>The length of the server ID. REQUIRED for "kdfNoKc" and "kdfKc" modes.
                        Provided in response by IUT for AFT tests.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>idIut</c>
                    <c>The server ID. REQUIRED for "kdfNoKc" and "kdfKc" modes. Provided in response
                        by IUT for AFT tests.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>oiPattern</c>
                    <c>The oiPattern used in the KDF. REQUIRED for "kdfNoKc" and "kdfKc" modes.</c>
                    <c>See <xref target="oiPatternConstruction"/>
                    </c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>kcRole</c>
                    <c>Key confirmation roles supported. REQUIRED for "kdfKc" modes.</c>
                    <c>provider, recipient</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>kcType</c>
                    <c>Key confirmation types supported. REQUIRED for "kdfKc" modes.</c>
                    <c>unilateral and/or bilateral</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>curve</c>
                    <c>The curve useds for keypair generation</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>tests</c>
                    <c>Array of individual test vector JSON objects, which are defined in <xref
                            target="tvjs"/>
                    </c>
                    <c>array</c>
                    <c>No</c>
                </texttable>
            </section>
            <section title="Test Case JSON Schema" anchor="tvjs">
                <t>Each test group contains an array of one or more test cases. Each test case is a
                    JSON object that represents a single test vector to be processed by the ACVP
                    client. The following table describes the JSON elements for each KAS ECC test
                    vector.</t>
                <texttable anchor="vs_tc_table5" title="Test Case JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>tcId</c>
                    <c>Numeric identifier for the test case, unique across the entire vector
                        set.</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>staticPublicServerX</c>
                    <c>The ECDSA static public key X coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>staticPublicServerY</c>
                    <c>The ECDSA static public key Y coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ephemeralPublicServerX</c>
                    <c>The ECDSA ephemeral public key X coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ephemeralPublicServerY</c>
                    <c>The ECDSA ephemeral public key Y coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceEphemeralServer</c>
                    <c>nonceEphemeralServer ONLY USED BY C(1,2) and C(0,2) schemes with KC. nonce to
                        be used in the MacData field</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceNoKc</c>
                    <c>The 16 byte nonce concatenated to the "Standard Test Message". Used for No
                        Key Confirmation tests only.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceDkm</c>
                    <c>The nonce supplied by the initiator to be used in the OI field in the
                        PartyUInfo field.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>staticPrivateIut</c>
                    <c>The IUT ECDSA static private key</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>staticPublicIutX</c>
                    <c>The IUT ECDSA static public key X coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>staticPublicIutY</c>
                    <c>The IUT ECDSA static public key Y coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ephemeralPrivateIut</c>
                    <c>The IUT ECDSA ephemeral private key</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ephemeralPublicIutX</c>
                    <c>The IUT ECDSA ephemeral public key X coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ephemeralPublicIutY</c>
                    <c>The IUT ECDSA ephemeral public key Y coordinate</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>oiLen</c>
                    <c>Length of the OtherInfo field</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>oi</c>
                    <c>OtherInfo field</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>dkm</c>
                    <c>Derived Keying Material.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>tagIut</c>
                    <c>The tag (or MAC) GENERATED BY THE SERVER/IUT by using the DKM to MAC the
                        Message with the specified method </c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceEphemeralIut</c>
                    <c>nonceEphemeralIut ONLY USED BY C(1,2) and C(0,2) schemes with KC. nonce to be
                        used in the MacData field</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceDkmIut</c>
                    <c>ONLY USED BY STATIC SCHEME. The nonce supplied by the initiator to be used in
                        the OI field in the PartyUInfo field</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceLenDkm</c>
                    <c>ONLY USED BY STATIC SCHEME. The length of the nonce supplied by the initiator
                        to be used in the OI field in the PartyUInfo field.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceEphemeralDkm</c>
                    <c>ONLY USED BY C(1,2) and C(0,2) schemes with KC. nonce to be used in the
                        MacData field</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceEphemralDkmLen</c>
                    <c>length of nonceEphemeralIut value.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nonceAesCcm</c>
                    <c>Nonce used by the CCM function, if CCM is used to generate the Tag.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>macData</c>
                    <c>The message to be MAced.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>z</c>
                    <c>A shared secret that is used to derive secret keying material using a key
                        derivation function.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>hashZServer</c>
                    <c>The hashed shared secret, only provided in noKdfNoKc modes of operation.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>hashZIut</c>
                    <c>The hashed shared secret, only provided in noKdfNoKc modes of operation.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>testPassed</c>
                    <c>Pass Fail indicating if the IUT agrees with the Tag generated by the
                        server.</c>
                    <c>boolean</c>
                    <c>Yes</c>
                </texttable>
            </section>
            <section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
                <t>The following is a example JSON object for KAS ECC test vectors sent from the
                    ACVP server to the crypto module.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1564,
		"algorithm": "KAS-ECC",
		"revision": "1.0",
		"testGroups": [
			{
                "tgId": 1,
				"scheme": "ephemeralUnified",
				"testType": "AFT",
				"kasRole": "initiator",
				"kasMode": "kdfNoKc",
				"parmSet": "ec",
				"hashAlg": "SHA2-256",
				"macType": "AES-CCM",
				"keyLen": 128,
				"aesCcmNonceLen": 64,
				"macLen": 128,
				"kdfType": "asn1",
				"idServerLen": 48,
				"idServer": "434156536964",
				"curve": "P-256",
				"tests": [{
					"tcId": 151,
					"ephemeralPublicServerX": "CBC9AF2F0FCE0F06643D7524DCCA96C78564BA77196C5F5F65DC0A119409A1F3",
					"ephemeralPublicServerY": "B619EBE85F2EC5E0A9B542CC77539D698C96CA5D0BDFCA224787C30CF971E3F4",
					"nonceNoKc": "BBDF1A42C9405B58B8329D583C437331",
					"nonceAesCcm": "FF5B0FD5F295257B"
				}]
			},
			{
                "tgId": 2,
				"scheme": "ephemeralUnified",
				"testType": "AFT",
				"kasRole": "responder",
				"kasMode": "kdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"macType": "HMAC-SHA2-224",
				"keyLen": 128,
				"macLen": 128,
				"kdfType": "asn1",
				"idServerLen": 48,
				"idServer": "434156536964",
				"curve": "P-224",
				"tests": [{
					"tcId": 161,
					"ephemeralPublicServerX": "FFAD4CDB4293F61C2A74566FD4323A03C6BB3F9D6526D8E0506B2186",
					"ephemeralPublicServerY": "0D614DAA05395A5FDF51BC769AEC355C9688ECEFCF2FE10E6DC1030E",
					"nonceNoKc": "BEAB1A2CB8406A7083105EC234603A80"
				}]
			},
			{
                "tgId": 3,
				"scheme": "ephemeralUnified",
				"testType": "VAL",
				"kasRole": "initiator",
				"kasMode": "kdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"macType": "HMAC-SHA2-224",
				"keyLen": 128,
				"macLen": 128,
				"kdfType": "asn1",
				"idServerLen": 48,
				"idServer": "434156536964",
				"idIutLen": 0,
				"curve": "P-224",
				"tests": [{
					"tcId": 181,
					"ephemeralPublicServerX": "D489605D37C4F555E50D8F010BEE3165B93F7C749263C4BF3E9A4808",
					"ephemeralPublicServerY": "23C8167ACFB24DC62D6747960330471B28DC646E04E593DBE6F8F1A4",
					"nonceNoKc": "6BBFEECEBBD5200C5FAE050526A77342",
					"ephemeralPrivateIut": "343936401C5F88E658E2C9C47C2EB48DDE10506684D8B55027C05A15",
					"ephemeralPublicIutX": "14AA2C1ECDC258FE8AD035E9A2872CD14466783F82F5F3F8D757133A",
					"ephemeralPublicIutY": "8DD3D48BF9115EA5AB7A479FB1DAB0A46BCD6B4D1A306D5CAC254EC1",
					"oiLen": 376,
					"otherInfo": "A1B2C3D4E5434156536964CAFECAFE2D822B413172BB3012AA986AFFAE95B46360E00AAD0D0548104C1F946389B97D",
					"tagIut": "5EEE5D912191984D89DF074B9A885411"
				}]
			},
			{
                "tgId": 4,
				"scheme": "ephemeralUnified",
				"testType": "VAL",
				"kasRole": "responder",
				"kasMode": "kdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"macType": "AES-CCM",
				"keyLen": 128,
				"aesCcmNonceLen": 64,
				"macLen": 128,
				"kdfType": "asn1",
				"idServerLen": 48,
				"idServer": "434156536964",
				"idIutLen": 0,
				"curve": "P-224",
				"tests": [{
					"tcId": 231,
					"ephemeralPublicServerX": "A0457CF2F5D38B72FF1BF3A2CF4C7CE30F215B5E52A53C39193B1639",
					"ephemeralPublicServerY": "38CA7951888E462D6C5F4E46FA953FF231F43D5A4F3FEBAEEBF3D52B",
					"nonceNoKc": "A889762176F5F02F8C1E4BBC0C669805",
					"ephemeralPrivateIut": "5F76009454AE9158797467C297229569C6E2027D6AFC226A63489444",
					"ephemeralPublicIutX": "1060CEE336B183738952CF13760D542E2F3AA60124D560EFA10F392C",
					"ephemeralPublicIutY": "216EA3B35E630A1EA4A91C430E5B63306A83624F0FFD8ADFF63A380E",
					"oiLen": 376,
					"otherInfo": "454156536964A1B2C3D4E5CAFECAFE9EF1EA2DC20EE820E7562CDD4DBCD5FD8CD57DB1F54961D8B0C83342C09B7D72",
					"nonceAesCcm": "BD79B8A8D5559128",
					"tagIut": "5CC10EF2564B0CD23D746A47DB5B98A2"
				}]
			}
		]
	}
]
            ]]>
                    </artwork>
                </figure>
            </section>
            <section anchor="app-vs-component-ex" title="Example Test Vectors Component JSON Object">
                <t>The following is a example JSON object for KAS ECC Component test vectors sent
                    from the ACVP server to the crypto module.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1565,
		"algorithm": "KAS-ECC",
		"mode": "Component",
		"revision": "1.0",
		"testGroups": [{
                "tgId": 1,
				"scheme": "ephemeralUnified",
				"testType": "AFT",
				"kasRole": "initiator",
				"kasMode": "noKdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"curve": "P-224",
				"tests": [{
					"tcId": 1,
					"ephemeralPublicServerX": "DACE4B35FD720DDD6B307777EBAFE53859C5FC2D330755B05B061CEB",
					"ephemeralPublicServerY": "195344DE0C79898C5C060BFACE1D24FDE1127ECF503EA04B08FFB9F1"
				}]
			}, {
                "tgId": 2,
				"scheme": "ephemeralUnified",
				"testType": "AFT",
				"kasRole": "responder",
				"kasMode": "noKdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"curve": "P-224",
				"tests": [{
					"tcId": 21,
					"ephemeralPublicServerX": "747EDBB8F62E1F06BD542FC2DD93169CB24DA6EF9E2FED4FE60FCBE6",
					"ephemeralPublicServerY": "C7FB2C3C9B95E70D908B9992C8018B785F7BCD3E5967E37EFB18A422"
				}]
			},
			{
                "tgId": 3,
				"scheme": "ephemeralUnified",
				"testType": "VAL",
				"kasRole": "initiator",
				"kasMode": "noKdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"curve": "P-224",
				"tests": [{
					"tcId": 41,
					"ephemeralPublicServerX": "866BD81E951787AA1130CB67BA48E22F8A9E7EFF0713418B4FB8A31C",
					"ephemeralPublicServerY": "050C9E3DB4560313979FE465AC8624E93BC0D97E7C68AC589840BCF7",
					"ephemeralPrivateIut": "0C9AE6286544FED81921E6495B946C6AF39DF90EC68379CEF2F7C69D",
					"ephemeralPublicIutX": "CA296A5C86EC39C4EA626A8D9AB39DE5D5092FAA3AE2F241D7791497",
					"ephemeralPublicIutY": "F768358D14A428C61A3229FB4BB752F02ECC1F54763CA98655A8412C",
					"hashZIut": "FC6268A34B63B5A82AF03A6CABE61C69CC57317E5E8C8F508FCB82D0"
				}]
			},
			{
                "tgId": 4,
				"scheme": "ephemeralUnified",
				"testType": "VAL",
				"kasRole": "responder",
				"kasMode": "noKdfNoKc",
				"parmSet": "eb",
				"hashAlg": "SHA2-224",
				"curve": "P-224",
				"tests": [{
					"tcId": 91,
					"ephemeralPublicServerX": "7A2EBA553C4DC0E4D7A19A3648BA9713496EB462B1B7D83D375F7FFD",
					"ephemeralPublicServerY": "5972BF3B114612AA5BBA14D0BE956DED03359F52ADDF0B9C2D0314E1",
					"ephemeralPrivateIut": "9AEDA69CE438C6F8592CE3B8E14E92BE9143E82B3EED42CF62E45BF7",
					"ephemeralPublicIutX": "941DAF3C527D2B76AA907F60C208F8987681972E466529CA8BD962FD",
					"ephemeralPublicIutY": "F381EC5DBEA7F6EA3A09D2D75372C014C3DE3ECABBBBC00DDFB97359",
					"hashZIut": "BB61FA1DCA5D93A6FBB43317AABCAE22A3EDF7F72216516115935D4E"
				}]
			}
		]
	}
]
            ]]>
                    </artwork>
                </figure>
            </section>
        </section>
        <section anchor="vector_responses" title="Test Vector Responses">
            <t>After the ACVP client downloads and processes a vector set, it must send the response
                vectors back to the ACVP server. The following table describes the JSON object that
                represents a vector set response.</t>
            <texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>acvVersion</c>
                <c>Protocol version identifier</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>vsId</c>
                <c>Unique numeric identifier for the vector set</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>testGroups</c>
                <c>Array of JSON objects that represent each test vector group. See <xref
                        target="vr_group_table"/>
                </c>
                <c>array</c>
            </texttable>
            <t>The testGroups section is used to organize the ACVP client response in a similar
                manner to how it receives vectors. Several algorithms SHALL require the client to
                send back group level properties in their response. This structure helps accommodate
                that.</t>
            <texttable anchor="vr_group_table" title="Vector Set Group Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>tgId</c>
                <c>The test group Id</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>tests</c>
                <c>The tests associated to the group specified in tgId</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
            </texttable>
            
            <section anchor="app-results-ex" title="Example Test Results JSON Object">
                <t>The following is a example JSON object for KAS ECC test results sent from the
                    crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1564,
		"testGroups": [{
				"tgId": 1,
				"tests": [{
					"tcId": 151,
					"nonceNoKc": "BBDF1A42C9405B58B8329D583C437331",
					"ephemeralPublicIutX": "F90FE5B7D5DA0F7849B0849D780143F4CC7E9F080465AA05DBD3E610D6B24763",
					"ephemeralPublicIutY": "1D746A8F960AE8425C63DE17618362F7040365D9168F21A0762526ECCC556084",
					"idIutLen": 40,
					"idIut": "A1B2C3D4E5",
					"oiLen": 376,
					"oi": "A1B2C3D4E5434156536964CAFECAFEA0988C0EB862E29CBFBD0B087D3223B9052811800B2D1ADF1D42AE73BAAD162A",
					"nonceAesCcm": "FF5B0FD5F295257B",
					"tagIut": "FF1ADCA06E582AD9E4A8B7FE3D7D9C28"
				}]
			},
			{
				"tgId": 2,
				"tests": [{
					"tcId": 161,
					"nonceNoKc": "BEAB1A2CB8406A7083105EC234603A80",
					"ephemeralPublicIutX": "C5D934686BAB0E156D4F5CF1BDA7B044128C803E4C8AA2D9B0024FC0",
					"ephemeralPublicIutY": "E2D8973A51A9CE0FA7FAD8A444ECAB518C672C65313BEE4150CFD50E",
					"idIutLen": 40,
					"idIut": "A1B2C3D4E5",
					"oiLen": 376,
					"oi": "434156536964A1B2C3D4E5CAFECAFE9D9E4AB0A187C117158C9A234F4AEE8328714003BFED6C08A7F191E61DCA2B6A",
					"tagIut": "77587ED9D13B811F200214FD5E1F864A"
				}]
			},
			{
				"tgId": 3,
				"tests": [{
					"tcId": 181,
					"testPassed": false
				}]
			},
			{
				"tgId": 4,
				"tests": [{
					"tcId": 231,
					"testPassed": false
				}]
			}
		]
	}
]
            ]]>
                    </artwork>
                </figure>
            </section>
            <section anchor="app-results-component-ex"
                title="Example Test Results Component JSON Object">
                <t>The following is a example JSON object for KAS ECC Component test results sent
                    from the crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1564,
		"testGroups": [{
				"tgId": 1,
				"tests": [{
					"tcId": 1,
					"ephemeralPublicIutX": "50471CE7F6FE2CAD6C901F85BF258E84571D3C88F59356B91DDBF286",
					"ephemeralPublicIutY": "5B8A7BC07BE15F28D34AA8324DEE93C715F569D3AF4820209F6452E7",
					"hashZIut": "96DCAF87127AB615896CCD0479C8BEAFD7EE111F384C962687D28ACC"
				}]
			},
			{
				"tgId": 2,
				"tests": [{
					"tcId": 21,
					"ephemeralPublicIutX": "3E95CE4241A63C4ECBDC12CF2A3FB9E56222C0D395885CF0B51B04F7",
					"ephemeralPublicIutY": "F8865F76DE98CFCFBBAD2E99A317636F48AC874847E0A489C96631EC",
					"hashZIut": "3B7721F7514C09DD38D62E72E20D0375A7B3AC5BD837A7B860BC65FA"
				}]
			},
			{
				"tgId": 3,
				"tests": [{
					"tcId": 41,
					"testPassed": false
				}]
			},
			{
				"tgId": 4,
				"tests": [{
					"tcId": 91,
					"testPassed": true
				}]
			}
		]
	}
]
            ]]>
                    </artwork>
                </figure>
            </section>
        </section>
        <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
        <section anchor="eccComp" title="ECC CDH Component Test">
            <t>The ECC CDH Component Test</t>
            <section anchor="eccCompCap" title="ECC CDH Component Capabilities JSON Values">
                <t>Each algorithm capability advertised is a self-contained JSON object using the
                    following values.</t>
                <texttable anchor="eccComp_caps_table"
                    title="KAS ECC Component Capabilities JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>The algorithm under test</c>
                    <c>value</c>
                    <c>KAS-ECC</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>mode</c>
                    <c>The algorithm mode</c>
                    <c>value</c>
                    <c>CDH-Component</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>revision</c>
                    <c>The algorithm testing revision to use.</c>
                    <c>value</c>
                    <c>"1.0"</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>prereqVals</c>
                    <c>Prerequisite algorithm validations</c>
                    <c>array of prereqAlgVal objects</c>
                    <c>See <xref target="prereq_algs"/>
                    </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>curve</c>
                    <c>Array of supported curves</c>
                    <c>array</c>
                    <c>See <xref target="supported_curves"/>
                    </c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
                <section anchor="app-eccComponent-reg-ex"
                    title="Example KAS ECC CDH-Component Capabilities JSON Object">
                    <t>The following is a example JSON object advertising support for KAS ECC
                        CDH-Component.</t>
                    <figure>
                        <artwork>
                            <![CDATA[

{
	"algorithm": "KAS-ECC",
	"mode": "CDH-Component",
	"revision": "1.0",
	"prereqVals": [{
		"algorithm": "ECDSA",
		"valValue": "123456"
	}],
	"function": ["keyPairGen", "dpGen"],
	"curve": ["p-192", "k-163", "b-163"]
}

            ]]>
                        </artwork>
                    </figure>
                </section>
            </section>
            <section anchor="eccCompVectors" title="ECC CDH Component TestVectors JSON Values">
                <texttable anchor="eccComp_vector_table"
                    title="KAS ECC CDH Component TestVectors JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>The algorithm under test</c>
                    <c>value</c>
                    <c>KAS-ECC</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>mode</c>
                    <c>The algorithm mode under test</c>
                    <c>value</c>
                    <c>CDH-Component</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>revision</c>
                    <c>The algorithm testing revision to use.</c>
                    <c>value</c>
                    <c>"1.0"</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>testGroups</c>
                    <c>Array of individual test group JSON objects, which are defined in <xref
                            target="eccCompTestGroup"/>
                    </c>
                    <c>Array</c>
                    <c>Array of test group information</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
                <section anchor="eccCompTestGroup" title="ECC CDH Component TestGroup JSON Values">
                    <texttable anchor="eccComp_testGroup_table"
                        title="KAS ECC CDH Component TestGroup JSON Values">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">JSON type</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>testType</c>
                        <c>The test type expected within the group. AFT is the only valid value for
                            ECC Component.</c>
                        <c>value</c>
                        <c>AFT</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>curve</c>
                        <c>The curve used in the test group</c>
                        <c>value</c>
                        <c>P-224, P-256, P-384, P-521, K-233, K-283, K-409, K-571, B-233, B-283,
                            B-409, B-571</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>tests</c>
                        <c>Array of individual test vector JSON objects, which are defined in <xref
                                target="eccCompTestCase"/>
                        </c>
                        <c>array</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
                <section anchor="eccCompTestCase" title="ECC CDH Component TestCase JSON Values">
                    <texttable anchor="eccComp_testCase_table"
                        title="KAS ECC CDH Component TestCase JSON Values">
                        <ttcol align="left">JSON Value</ttcol>
                        <ttcol align="left">Description</ttcol>
                        <ttcol align="left">Valid Values</ttcol>
                        <ttcol align="left">Optional</ttcol>
                        <c>tcId</c>
                        <c>Numeric identifier for the test case, unique across the entire vector
                            set.</c>
                        <c>value</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>publicServerX</c>
                        <c>The X coordinate of the server's public key</c>
                        <c>value</c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>publicServerY</c>
                        <c>The Y coordinate of the server's public key</c>
                        <c>value</c>
                        <c>Yes</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>publicIutX</c>
                        <c>The X coordinate of the iut's public key</c>
                        <c>value</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>publicIutY</c>
                        <c>The Y coordinate of the iut's public key</c>
                        <c>value</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                        <c>z</c>
                        <c>The shared secret Z</c>
                        <c>value</c>
                        <c>No</c>
                        <c/>
                        <c/>
                        <c/>
                        <c/>
                    </texttable>
                </section>
                <section anchor="app-eccComponent-vs-ex"
                    title="Example KAS ECC CDH-Component Test Vectors JSON Object">
                    <t>The following is a example JSON object for KAS ECC CDH-Component test vectors
                        sent from the ACVP server to the crypto module.</t>
                    <figure>
                        <artwork>
                            <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1750,
		"algorithm": "KAS-ECC",
		"mode": "CDH-Component",
		"revision": "1.0",
		"testGroups": [{
				"tgId": 1,
				"testType": "AFT",
				"curve": "p-192",
				"tests": [{
					"tcId": 1,
					"publicServerX": "CAEF2CBA796BB7FC143D3EAED698C26AAE6F6F79DF3974EE",
					"publicServerY": "03ED6D7A90637629DBCEBFF4A2D1D771D9D4CF9F0D88CE90"
				}]
			},
			{
				"tgId": 2,
				"testType": "AFT",
				"curve": "k-163",
				"tests": [{
					"tcId": 26,
					"publicServerX": "048C46D674E1218D0BD3C9FCD120ECE8B4DB7310E7",
					"publicServerY": "ED3EEDB656E035C779081090BE44B743E857E3B4"
				}]
			},
			{
				"tgId": 3,
				"testType": "AFT",
				"curve": "b-163",
				"tests": [{
					"tcId": 51,
					"publicServerX": "8EE7C8F08BF47B21CA2FE911B721651B90E52391",
					"publicServerY": "0461DF3646E95598EAE4F5C6A634E71006ABC6FE1F"
				}]
			}
		]
	}
]
            ]]>
                        </artwork>
                    </figure>
                </section>
            </section>
            <section anchor="cdh_vector_responses" title="KAS CDH-Component Test Vector Responses">
                <t>After the ACVP client downloads and processes a vector set, it must send the
                    response vectors back to the ACVP server. The following table describes the JSON
                    object that represents a vector set response.</t>
                <texttable anchor="vr_cdh_top_table"
                    title="CDH Component Vector Set Response JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <c>acvVersion</c>
                    <c>Protocol version identifier</c>
                    <c>value</c>
                    <c/>
                    <c/>
                    <c/>
                    <c>vsId</c>
                    <c>Unique numeric identifier for the vector set</c>
                    <c>value</c>
                    <c/>
                    <c/>
                    <c/>
                    <c>testGroups</c>
                    <c>Array of JSON objects that represent each test vector group. See <xref
                            target="vr_cdh_group_table"/>
                    </c>
                    <c>array</c>
                </texttable>
                <t>The testGroups section is used to organize the ACVP client response in a similar
                    manner to how it receives vectors. Several algorithms SHALL require the client
                    to send back group level properties in their response. This structure helps
                    accommodate that.</t>
                <texttable anchor="vr_cdh_group_table"
                    title="CDH Component Vector Set Group Response JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <c>tgId</c>
                    <c>The test group Id</c>
                    <c>value</c>
                    <c/>
                    <c/>
                    <c/>
                    <c>tests</c>
                    <c>The tests associated to the group specified in tgId</c>
                    <c>value</c>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
                <t>Each test group contains an array of one or more test cases. Each test case is a
                    JSON object that represents a single test vector to be processed by the ACVP
                    client. The following table describes the JSON elements for each DRBG test
                    vector.</t>
                <texttable anchor="vs_tr_table" title="CDH Component Test Case Results JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>tcId</c>
                    <c>Numeric identifier for the test case, unique across the entire vector
                        set.</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>publicIutX</c>
                    <c>x value of the IUT public key </c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>publicIutY</c>
                    <c>x value of the IUT public key </c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>z</c>
                    <c>Computed shared secret Z</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                </texttable>
            </section>
            <section anchor="app-eccComponent-results-ex"
                title="Example KAS ECC CDH Component Test Results JSON Object">
                <t>The following is a example JSON object for KAS ECC CDH Component test results
                    sent from the crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1750,
		"testGroups": [{
				"tgId": 1,
				"tests": [{
					"tcId": 1,
					"publicIutX": "DB9FBC84CBAD3EED42C31CDBF2882041634D040219C3E47A",
					"publicIutY": "9BD672733BCCEF2BD805E97FF9BBFE0FFC003BEEEF56868B",
					"z": "8BEAEA60DFAC075F9F25A5CFEA39818D98D3EA4B9D4C34A8"
				}]
			},
			{
				"tgId": 2,
				"tests": [{
					"tcId": 26,
					"publicIutX": "058C593D1D4E8238102BDE6B497218D92F8EDD2997",
					"publicIutY": "0437682E4608984EFC7FB619FB260EF27CAF704D7B",
					"z": "075D9A831E0665521D613AEAA59B8C8CDFBAC8C683"
				}]
			},
			{
				"tgId": 3,
				"tests": [{
					"tcId": 51,
					"publicIutX": "04128CD094F6988AA26DA2B100A71A31214CC9C50B",
					"publicIutY": "01A3A88C9F0987E488922573D0A31D300532F0B268",
					"z": "07EC896621BF1703EB7567196ED1DE5742C4695990"
				}]
			}
		]
	}
]
            ]]>
                    </artwork>
                </figure>
            </section>
        </section>
        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>TBD...</t>
        </section>
        <!-- Possibly a 'Contributors' section ... -->
        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>
        <section anchor="Security" title="Security Considerations">
            <t>Security considerations are addressed by the ACVP specification.</t>
        </section>
    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <references title="Normative References">
            <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.Rfc.2119.xml"?-->
            &RFC2119; <reference anchor="ACVP">
                <!-- the following is the minimum to make xml2rfc happy -->
                <front>
                    <title>ACVP Specification</title>
                    <author initials="authInitials" surname="authSurName">
                        <organization>NIST</organization>
                    </author>
                    <date year="2016"/>
                </front>
            </reference>
            <reference anchor="SP800-56a"
                target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
                <front>
                    <title>Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete
                        Logarithm Cryptography</title>
                    <author>
                        <organization>NIST</organization>
                    </author>
                    <date month="April" year="2018"/>
                </front>
            </reference>
        </references>
    </back>
</rfc>
