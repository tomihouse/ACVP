<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [


<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subeddsa-1.0" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
        <title abbrev="Sym Alg JSON">ACVP EDDSA Algorithm JSON Specification</title>
        <!-- add 'role="editor"' below for the editors if appropriate -->
        <!-- Another author who claims to be an editor -->
        <author fullname="Christopher Celi" initials="C.C." role="editor" surname="Celi">
            <organization>National Institute of Standards and Technology</organization>
            <address>
                <postal>
                    <street>100 Bureau Dr.</street>
                    <!-- Reorder these if your country does things differently -->
                    <city>Gaithersburg</city>
                    <region>MD</region>
                    <code>20850</code>
                    <country>USA</country>
                </postal>
                <email>christopher.celi@nist.gov</email>
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <date month="August" year="2018" />
        <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->
        <!-- Meta-data Declarations -->
        <area>General</area>
        <workgroup>TBD</workgroup>
        <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
        <keyword>acvp</keyword>
        <keyword>crypto</keyword>
        <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
        <abstract>
            <t>This document defines the JSON schema for using EDDSA algorithms with the ACVP specification.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing EDDSA algorithms using ACVP.</t>
            <section title="Requirements Language">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted in																															
					
                    
                    <xref target="RFC2119">RFC 2119</xref>.																								
				
                
                </t>
            </section>
        </section>
        <section anchor="supported_algs" title="Supported EDDSA Algorithms">
            <t>The following EDDSA algorithms MAY be advertised by the ACVP compliant cryptographic module:</t>
            <t>
                <list style="symbols">
                    <t>EDDSA / keyGen</t>
                    <t>EDDSA / keyVer</t>
                    <t>EDDSA / sigGen</t>
                    <t>EDDSA / sigVer</t>
                </list>
            </t>
        </section>
        <section anchor="test_types" title="Test Types and Test Coverage">
            <t>The ACVP server performs a set of tests on the specified EDDSA algorithm in order to assess the
                correctness and robustness of the implementation. A typical ACVP validation session
                SHALL require multiple tests to be performed for every supported permutation of EDDSA
                capabilities. This section describes the design of the tests used to validate
                implementations of the EDDSA algorithms.  
			
                
                
                <list style="testtype">
                    <t>
                    EDDSA / keyGen "AFT" - Algorithm Functional Test. The IUT is REQUIRED for each test 
                    case provided, to generate a key pair based on an approved curve. This information is then
                    communicated to the ACVP server and validated.
                  </t>
                    <t>
                    EDDSA / keyVer "AFT" - Algorithm Functional Test. The ACVP server is REQUIRED to generate a series of keys based on the IUT provided
					NIST curve(s).  The keys generated by the server MAY or MAY NOT be valid, the IUT is REQUIRED to determine if the keys provided in the test
					cases are valid or invalid keys as they relate to the curve.
                  </t>
                    <t>
                    EDDSA / sigGen "AFT" - Algorithm Functional Test. This testing mode expects the IUT to generate valid signatures based on the ACVP provided message.
                    The signature is then validated with the ACVP server given the IUT's communicated curve, public key, and signature.
                  </t>
                    <t>
                    EDDSA / sigVer "AFT" - Algorithm Functional Test. The ACVP server generates a series of signatures to communicate to the IUT. The IUT is REQUIRED
                    to determine the validity of the signature given the curve, key, and message. 
                  </t>
                </list>
            </t>
            <section anchor="test_coverage" title="Test Coverage">
                <t>TBD...</t>
                <section anchor="requirements_covered" title="Requirements Covered">
                    <t>
                        <list>
                            <t>
                            TBD...
                          </t>
                        </list>
                    </t>
                </section>
                <section anchor="requirements_not_covered"
                    title="Requirements Not Covered">
                    <t>
                        <list>
                            <t>
                            TBD...
                          </t>
                        </list>
                    </t>
                </section>
            </section>
        </section>
        <section anchor="caps_reg" title="Capabilities Registration">
            <t>ACVP requires crypto modules to register their capabilities. This allows the crypto	module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process. This section describes the constructs for advertising support of EDDSA algorithms to the ACVP server.</t>
            <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms' value of the ACVP registration message. The 'algorithms' value is an array, where each	array element is an individual JSON object defined in this section. The 'algorithms' value is part of the 'capability_exchange' element of the ACVP JSON registration message. See the ACVP specification for details on the registration message.</t>
            <section anchor="prereq_algs" title="Required Prerequisite Algorithms for EDDSA Validations">
                <t>Each EDDSA implementation relies on other cryptographic primitives. For example, EDDSA uses an underlying SHA algorithm. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>
                <texttable anchor="rereqs_table" title="Required EDDSA Prerequisite Algorithms JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>a prerequisite algorithm</c>
                    <c>value</c>
                    <c>DRBG, DRBG_OPT2, SHA, SHA_OPT2, SHA_OPT3</c>
                    <c>No</c>
                    <c>valValue</c>
                    <c>algorithm validation number</c>
                    <c>value</c>
                    <c>actual number or "same"</c>
                    <c>No</c>
                    <c>prereqAlgVal</c>
                    <c>prerequistie algorithm validation</c>
                    <c>object with algorithm and valValue properties</c>
                    <c>see above</c>
                    <c>No</c>
                    <c>prereqVals</c>
                    <c>prerequistie algorithm validations</c>
                    <c>array of prereqAlgVal objects</c>
                    <c>see above</c>
                    <c>No</c>
                </texttable>
            </section>
            <section anchor="eddsa_caps_reg" title="EDDSA Algorithm Capabilities Registration">
                <t>Each algorithm capability advertised is a self-contained JSON object using the following values</t>
                <texttable anchor="caps_table" title="EDDSA Algorithm Capabilities JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>The algorithm under test</c>
                    <c>value</c>
                    <c>"EDDSA"</c>
                    <c>No</c>
                    <c>mode</c>
                    <c>The EDDSA mode to be validated</c>
                    <c>value</c>
                    <c>"keyGen", "keyVer", "sigGen", or "sigVer"</c>
                    <c>No</c>
                    <c>revision</c>
                    <c>The algorithm testing revision to use.</c>
                    <c>value</c>
                    <c>"1.0"</c>
                    <c>No</c>
                    <c>prereqVals</c>
                    <c>prerequistie algorithm validations</c>
                    <c>array of prereqAlgVal objects</c>
                    <c>See 																																				
						
                        
                        <xref target="prereq_algs" />
                    </c>
                    <c>No</c>
                    <c>capabilities</c>
                    <c>array of JSON objects, each with fields pertaining to the global EDDSA mode indicated above and identified uniquely by the combination of the EDDSA "mode" and indicated properties</c>
                    <c>Array of JSON objects</c>
                    <c>See                                                                                                 																		
						
                        
                        <xref target="supported_modes" />
                    </c>
                </texttable>
            </section>
            <section anchor="supported_modes" title="Supported EDDSA Modes Capabilities">
                <t>The EDDSA mode capabilities are advertised as JSON objects within the 'capabilities' value of the ACVP registration message - see                                                             															
					
                    
                    <xref target="caps_table"/>. The 'capabilities' value is an array, where each array element is a JSON object corresponding to a particular EDDSA mode defined in this section. The 'capabilities'	value is part of the 'capability_exchange' element of the ACVP JSON registration message.	See the ACVP specification for details on the registration message.                                                												
				
                
                </t>
                <t>Each EDDSA mode's capabilities are advertised as JSON objects.</t>
                <section anchor="mode_keyGen" title="The keyGen Mode Capabilities">
                    <t>The EDDSA keyGen mode capabilities are advertised as JSON objects, which are elements of the 'capabilities' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
                    <t>Each EDDSA keyGen mode capability set is advertised as a self-contained JSON object.</t>
                    <section anchor="mode_keyGenFullSet" title="keyGen Full Set of Capabilities">
                        <t>The complete list of EDDSA key generation capabilities may be advertised by the ACVP compliant crypto module:</t>
                        <texttable anchor="keyGen_table" title="EDDSA keyGen Capabilities JSON Values">
                            <ttcol align="left">JSON Value</ttcol>
                            <ttcol align="left">Description</ttcol>
                            <ttcol align="left">JSON type</ttcol>
                            <ttcol align="left">Valid Values</ttcol>
                            <ttcol align="left">Optional</ttcol>
                            <c>curve</c>
                            <c>The curve names supported for the IUT in keyGen.</c>
                            <c>array</c>
                            <c>Any non-empty subset of {"ED-25519", "ED-448"}</c>
                            <c>No</c>
                            <c>secretGenerationMode</c>
                            <c>The method used to generate the randomness incoporated in the key.</c>
                            <c>array</c>
                            <c>Any non-empty subset of {"extra bits", "testing candidates"}</c>
                            <c>No</c>
                        </texttable>
                    </section>
                </section>
                <section anchor="mode_keyVer" title="The keyVer Mode Capabilities">
                    <t>The EDDSA keyVer mode capabilities are advertised as JSON objects, which are elements of the 'capabilities' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
                    <t>Each EDDSA keyVer mode capability set is advertised as a self-contained JSON object.</t>
                    <section anchor="mode_keyVerFullSet" title="keyVer Full Set of Capabilities">
                        <t>The complete list of EDDSA key verification capabilities may be advertised by the ACVP compliant crypto module:</t>
                        <texttable anchor="keyVer_table" title="EDDSA keyVer Capabilities JSON Values">
                            <ttcol align="left">JSON Value</ttcol>
                            <ttcol align="left">Description</ttcol>
                            <ttcol align="left">JSON type</ttcol>
                            <ttcol align="left">Valid Values</ttcol>
                            <ttcol align="left">Optional</ttcol>
                            <c>curve</c>
                            <c>The curve names supported for the IUT in keyVer.</c>
                            <c>array</c>
                            <c>Any non-empty subset of {"ED-25519", "ED-448"}</c>
                            <c>No</c>
                        </texttable>
                    </section>
                </section>
                <section anchor="mode_sigGen" title="The sigGen Mode Capabilities">
                    <t>The EDDSA sigGen mode capabilities are advertised as JSON objects, which are elements of the 'capabilities' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
                    <t>Each EDDSA sigGen mode capability set is advertised as a self-contained JSON object.</t>
                    <section anchor="mode_sigGenFullSet" title="sigGen Full Set of Capabilities">
                        <t>The complete list of EDDSA signature generation capabilities may be advertised by the ACVP compliant crypto module:</t>
                        <texttable anchor="sigGen_table" title="EDDSA sigGen Capabilities JSON Values">
                            <ttcol align="left">JSON Value</ttcol>
                            <ttcol align="left">Description</ttcol>
                            <ttcol align="left">JSON type</ttcol>
                            <ttcol align="left">Valid Values</ttcol>
                            <ttcol align="left">Optional</ttcol>
                            <c>curve</c>
                            <c>The curve names supported for the IUT in sigGen.</c>
                            <c>array</c>
                            <c>Any non-empty subset of {"ED-25519", "ED-448"}</c>
                            <c>No</c>
                            <c>pure</c>
                            <c>If the IUT supports normal 'pure' sigGen functionality</c>
                            <c>bool</c>
                            <c>true/false</c>
                            <c>No</c>
                            <c>preHash</c>
                            <c>If the IUT supports accepting a preHashed message to sign</c>
                            <c>bool</c>
                            <c>true/false</c>
                            <c>No</c>
                        </texttable>
                    </section>
                </section>
                <section anchor="mode_sigVer" title="The sigVer Mode Capabilities">
                    <t>The EDDSA sigVer mode capabilities are advertised as JSON objects, which are elements of the 'capabilities' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
                    <t>Each EDDSA sigVer mode capability set is advertised as a self-contained JSON object.</t>
                    <section anchor="mode_sigVerFullSet" title="sigVer Full Set of Capabilities">
                        <t>The complete list of EDDSA signature verification capabilities may be advertised by the ACVP compliant crypto module:</t>
                        <texttable anchor="sigVer_table" title="EDDSA sigVer Capabilities JSON Values">
                            <ttcol align="left">JSON Value</ttcol>
                            <ttcol align="left">Description</ttcol>
                            <ttcol align="left">JSON type</ttcol>
                            <ttcol align="left">Valid Values</ttcol>
                            <ttcol align="left">Optional</ttcol>
                            <c>curve</c>
                            <c>The curve names supported for the IUT in sigVer.</c>
                            <c>array</c>
                            <c>Any non-empty subset of {"ED-25519", "ED-448"}</c>
                            <c>No</c>
                            <c>pure</c>
                            <c>If the IUT supports normal 'pure' sigGen functionality</c>
                            <c>bool</c>
                            <c>true/false</c>
                            <c>No</c>
                            <c>preHash</c>
                            <c>If the IUT supports accepting a preHashed message to sign</c>
                            <c>bool</c>
                            <c>true/false</c>
                            <c>No</c>
                        </texttable>
                    </section>
                </section>
            </section>
        </section>
        <section anchor="test_vectors" title="Test Vectors">
            <t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual EDDSA function. This section describes the JSON schema for a test vector set used with EDDSA algorithms.</t>
            <t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client.The following table describes the JSON elements at the top level of the hierarchy.</t>
            <texttable anchor="vs_top_table" title="Vector Set JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>acvVersion</c>
                <c>Protocol version identifier</c>
                <c>value</c>
                <c>vsId</c>
                <c>Unique numeric identifier for the vector set</c>
                <c>value</c>
                <c>algorithm</c>
                <c>EDDSA</c>
                <c>value</c>
                <c>mode</c>
                <c>The EDDSA mode used for the test vectors</c>
                <c>value</c>
                <c>revision</c>
                <c>The algorithm testing revision to use.</c>
                <c>value</c>
                <c>testGroups</c>
                <c>Array of test group JSON objects, which are defined in 																																	
						
                    
                    <xref target="tgjs" />
                </c>
                <c>array</c>
            </texttable>
            <section title="Test Groups JSON Schema" anchor="tgjs">
                <t>The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted	in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</t>
                <t> The test group for EDDSA is as follows:</t>
                <texttable anchor="vs_tg_table5" title="Vector Group JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>curve</c>
                    <c>The curve type used for the test vectors.</c>
                    <c>value</c>
                    <c>No</c>
                    <c>secretGenerationMode</c>
                    <c>The method of generating a secret used for key generation in the test vectors.</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c>testType</c>
                    <c>The testType for the group. Either AFT or BFT.</c>
                    <c>value</c>
                    <c>No</c>
                    <c>q</c>
                    <c>The encoded public key point</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c>preHash</c>
                    <c>Denotes whether or not the IUT should accept the message as a preHashed message before signing</c>
                    <c>bool</c>
                    <c>Yes</c>
                    <c>tests</c>
                    <c>Array of individual test vector JSON objects, which are defined in 																																							
							
                        
                        <xref target="tvjs" />
                    </c>
                    <c>array</c>
                    <c>No</c>
                </texttable>
            </section>
            <section title="Test Case JSON Schema" anchor="tvjs">
                <t>Each test group contains an array of one or more test cases. Each test case is a JSON object	that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each EDDSA test vector.</t>
                <texttable anchor="vs_tc_table5" title="Test Case JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>tcId</c>
                    <c>Numeric identifier for the test case, unique across the entire vector set.</c>
                    <c>value</c>
                    <c>No</c>
                    <c>q</c>
                    <c>The encoded public key curve point</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c>signature</c>
                    <c>The signature</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c>message</c>
                    <c>The message used to generate signature or verify signature</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c>context</c>
                    <c>The context used to generate signature or verify signature</c>
                    <c>value</c>
                    <c>Yes</c>
                </texttable>
            </section>
        </section>
        <section anchor="vector_responses" title="Test Vector Responses">
            <t>After the ACVP client downloads and processes a vector set, it must send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</t>
            <texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>acvVersion</c>
                <c>Protocol version identifier</c>
                <c>value</c>
                <c>vsId</c>
                <c>Unique numeric identifier for the vector set</c>
                <c>value</c>
                <c>testGroups</c>
                <c>Array of JSON objects that represent each test group of results, as defined by the tables below</c>
                <c>array</c>
            </texttable>
            <t>The following table describes the JSON object that represents a test group response for EDDSA.</t>
            <texttable anchor="vr_top_table2" title="Test Group Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>tgId</c>
                <c>Unique numeric identifier for the test group</c>
                <c>value</c>
                <c>q</c>
                <c>Optional encoded public key for the group</c>
                <c>value</c>
                <c>tests</c>
                <c>Array of JSON objects that represent each result, as defined by the table below</c>
                <c>array</c>
            </texttable>
            <t>The following table describes the JSON object that represents a test case response for EDDSA.</t>
            <texttable anchor="vr_top_table5" title="Test Case Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <ttcol align="left">Optional</ttcol>
                <c>d</c>
                <c>The encoded private key point</c>
                <c>value</c>
                <c>Yes</c>
                <c>q</c>
                <c>The encoded public key point </c>
                <c>value</c>
                <c>Yes</c>
                <c>signature</c>
                <c>The signature component S</c>
                <c>value</c>
                <c>Yes</c>
                <c>testPassed</c>
                <c>The pass or fail result of the verify or validation</c>
                <c>true/false</c>
                <c>Yes</c>
            </texttable>
        </section>
        <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>TBD...</t>
        </section>
        <!-- Possibly a 'Contributors' section ... -->
        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>
        <section anchor="Security" title="Security Considerations">
            <t>Security considerations are addressed by the ACVP specification.</t>
        </section>
    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <references title="Normative References">
            <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->      &RFC2119;      																					
			
            
            <reference anchor="ACVP">
                <!-- the following is the minimum to make xml2rfc happy -->
                <front>
                    <title>ACVP Specification</title>
                    <author initials="authInitials" surname="authSurName">
                        <organization>NIST</organization>
                    </author>
                    <date year="2016" />
                </front>
            </reference>
        </references>
        <section anchor="app-reg-ex" title="Example Capabilities JSON Object">
            <section anchor="app-reg-ex2" title="Example EDDSA Capabilities JSON Object">
                <t>The following sections contain example JSON for the various EDDSA modes: keyGen, keyVer, sigGen, and sigVer. Note that all binary HEX representations are in big-endian byte order but little-endian bit format.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[{
		"algorithm": "EDDSA",
		"mode": "keyGen",
		"revision": "1.0",
		"prereqVals": [{
				"algorithm": "SHA",
				"valValue": "123456"
			},
			{
				"algorithm": "DRBG",
				"valValue": "123456"
			}
		],
		"curve": [
			"ED-25519",
			"ED-448"
		],
		"secretGenerationMode": [
			"extra bits",
			"testing candidates"
		]
	},
	{
		"algorithm": "EDDSA",
		"mode": "keyVer",
		"revision": "1.0",
		"prereqVals": [{
				"algorithm": "SHA",
				"valValue": "123456"
			},
			{
				"algorithm": "DRBG",
				"valValue": "123456"
			}
		],
		"curve": [
			"ED-25519",
			"ED-448"
		]
	},
	{
		"algorithm": "EDDSA",
		"mode": "sigGen",
		"revision": "1.0",
		"prereqVals": [{
				"algorithm": "SHA",
				"valValue": "123456"
			},
			{
				"algorithm": "DRBG",
				"valValue": "123456"
			}
		],
		"pure": true,
		"preHash": true,
		"curve": [
			"ED-25519",
			"ED-448"
		]
	},
	{
		"algorithm": "EDDSA",
		"mode": "sigVer",
		"revision": "1.0",
		"prereqVals": [{
				"algorithm": "SHA",
				"valValue": "123456"
			},
			{
				"algorithm": "DRBG",
				"valValue": "123456"
			}
		],
		"pure": true,
		"preHash": true,
		"curve": [
			"ED-25519",
			"ED-448"
		]
	}

]
            ]]>
                    </artwork>
                </figure>
            </section>
        </section>
        <section anchor="app-vs-ex" title="Example Vector Set Request/Responses JSON Object">
            <section anchor="app-vs-ex5" title="Example Test EDDSA KeyGen JSON Object">
                <t>The following is a example JSON object for EDDSA KeyGen, test vectors sent from the ACVP server to the crypto module and the response.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "algorithm": "EDDSA",
        "mode": "keyGen",
        "revision": "1.0",
        "testGroups": [
            {
                "curve": "ED-25519",
                "secretGenerationMode": "extra bits",
				"testType": "AFT",
                "tests": [
                    {
                        "tcId": 1
                    }
                ]
            }
        ]
    }
]
            ]]>
                    </artwork>
                </figure>
                <t>The following is a example JSON object for EDDSA KeyGen test results sent from the crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "testGroups": [
            {
				"tgId": 1,
				"tests": [
					{
						"tcId": 1,
						"q": "D51FB3D405A636227833A0950A2F4EDAF547F50448D7F371D0E9353F207B2B09",
						"d": "147BA261D11CD323331D87C22E215724E9CD5E6B6BEAC85A9808241D9E80781F"
					}
				]
            }
        ]
    }
]
            ]]>
                    </artwork>
                </figure>
            </section>
            <section anchor="app-vs-ex6" title="Example Test EDDSA KeyVer JSON Object">
                <t>The following is a example JSON object for EDDSA KeyVer, test vectors sent from the ACVP server to the crypto module and the response.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "algorithm": "EDDSA",
        "mode": "keyVer",
        "revision": "1.0",
        "testGroups": [
            {
				"tgId": 1,
                "curve": "ED-25519",
				"testType": "AFT",
                "tests": [
                    {
                        "tcId": 1,
                        "q": "227093C50F7D04A41121CEFDF076CC8B21D44E7506F341F8BFAB269CE06F2B7E",
                    }
                ]
            }
        ]
    }
]
            ]]>
                    </artwork>
                </figure>
                <t>The following is a example JSON object for EDDSA KeyVer test results sent from the crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
		"testGroups": [
			{
				"tgId": 1,
				"tests": [
					{
						"tcId": 1,
						"testPassed": true
					}
				]
            }
        ]
    }
]
            ]]>
                    </artwork>
                </figure>
            </section>
            <section anchor="app-vs-ex8" title="Example Test EDDSA Signature Generation JSON Object">
                <t>The following is a example JSON object for EDDSA SigGen, test vectors sent from the ACVP server to the crypto module and the response.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "algorithm": "EDDSA",
        "mode": "sigGen",
        "revision": "1.0",
        "testGroups": [
            {
				"tgId": 1,
				"testType": "AFT",
                "curve": "ED-25519",
				"preHash": false,
                "tests": [
                    {
                        "tcId": 1,
                        "message": "A81C8A22735A260CB1A8105A2964646097D8A9B110701AB0D49C9071836CAD39E31F5020D24B2C841FAC58F44F3F3F814495B063A686F6F93C5C6D9FDF45B9099C609A69E6A9F6483C5038066A560D413C6FB73D76499A7D8836C9C89368D557B2C24A5D817CF1FBD226AC41037E3005250007B49C6CCCE7BD1BE5D7A5C96EE8"
                    }
                ]
            },
			{
				"tgId": 5,
				"testType": "bft",
				"curve": "ED-25519",
				"preHash": false,
				"tests": [
					{
						"tcId": 41,
						"message": "F27E9F9D"
					},
					{
						"tcId": 42,
						"message": "F27E9F9C"
					},
					{
						"tcId": 43,
						"message": "F27E9F9F"
					}
				]
			}
        ]
    }
]
            ]]>
                    </artwork>
                </figure>
                <t>The following is a example JSON object for EDDSA SigGen test results sent from the crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "testGroups": [
            {
				"tgId": 1,
				"q": "4BA34FE699DBDC89750FF006AA35E282BF71C180B53C2DE620676C8707A14E48",
				"tests": [
					{
						"tcId": 1,
						"signature": "772990B0E53B3E21DC8BD139CECB39892D75BD70DAFFDC73E241E29515E67CC642CB2A6B479FFEF4F3F16B5BC3DDF06AB25A92028F2DC0464B3CFDFD3B8F4D08"
					}
				]
            },
			{
				"tgId": 5,
				"q": "ADD51513B67540E3A392721742C7E81F1BAE77DEFC16314E32A06976BA9BBFF7",
				"tests": [
					{
						"tcId": 41,
						"signature": "6EA857E68CEC0825EAD378A2F445BB17993D151CF9A168A44F47E13D356F6DC9AA67517DE4A2FB22BA24E1732DA0234427A2572CBE80294277F2141498E7F50E"
					},
					{
						"tcId": 42,
						"signature": "883B0336036509FC44CD2E507C5E916696213F9CF2429796E248516EFBDFAFE5C98EE6DBF82314B6FB5403383BC2E4ECCC89C7D686FE3A630B74866A0126740C"
					},
					{
						"tcId": 43,
						"signature": "E402705AC2EFC216EB7FA1AC5461A8451CE6F72B0AFA63D75BFBD5C4DD98A07207168CC6A542F01AAC6C31EC1C09062B053A54F6C93B801460FE33348B87DD03"
					}
				]
			}
        ]
    }
]
          ]]>
                    </artwork>
                </figure>
            </section>
            <section anchor="app-vs-ex9" title="Example Test EDDSA SigVer JSON Object">
                <t>The following is a example JSON object for EDDSA SigVer, test vectors sent from the ACVP server to the crypto module and the response.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "algorithm": "EDDSA",
        "mode": "sigVer",
        "revision": "1.0",
        "testGroups": [
            {
				"tgId": 1,
				"testType": "AFT"
                "curve": "ED-25519",
                "preHash": false,
				"q": "502A28FAF736CBCF1B51A3816CADC61D6B46699149A442BA741B378386B7120C",
                "tests": [
                    {
                        "tcId": 1,
                        "message": "BED1D245D569D5C10693F408A195D0404D3F27DFD0C670034A99AFD5F33E84690812516F4335ED6B2D5FD824075B061D7BA5731DCA4EF01040167AC2D40320DEB7FC63A8B34CE5C05CF22EC0D7B11AC55C84D8131D3C656CBA05BB29F64A5D5C20AFD5212163A254B9915A30BBAB15FB3F710C325F408E8D1E840B55A09F52B7",
                        "signature": "9C09C0FF50B61E4443DBA5D1262B7CE6DDD3742BCAF288B0A17078F78ECB2480976448A177FFBB6E39FC9C02ABFA63806D664248C67803E4023A681E9930550F"
                    }
                ]
            }
        ]
    }
]
            ]]>
                    </artwork>
                </figure>
                <t>The following is a example JSON object for EDDSA generation test results sent from the crypto module to the ACVP server.</t>
                <figure>
                    <artwork>
                        <![CDATA[
[
    {
        "acvVersion": <acvp-version>
    },
    {
        "vsId": 1564,
        "testGroups": [
            {
				"tgId": 1,
				"tests": [
					{
                		"tcId": 1,
                		"testPassed": false
					}
				]
            }
        ]
    }
]
          ]]>
                    </artwork>
                </figure>
            </section>
        </section>
    </back>
</rfc>